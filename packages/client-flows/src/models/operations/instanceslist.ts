/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type InstancesListRequest = {
    workflowId: string;
    running: boolean;
    cursor?: string | undefined;
    pageSize?: number | undefined;
};

export type Cursor = {
    next?: string | undefined;
    data: Array<components.WorkflowInstance>;
};

/**
 * The request has succeeded.
 */
export type InstancesListResponseBody = {
    cursor: Cursor;
};

export type InstancesListResponse = {
    result: InstancesListResponseBody;
};

/** @internal */
export namespace InstancesListRequest$ {
    export const inboundSchema: z.ZodType<InstancesListRequest, z.ZodTypeDef, unknown> = z.object({
        workflowId: z.string(),
        running: z.boolean(),
        cursor: z.string().optional(),
        pageSize: z.number().int().optional(),
    });

    export type Outbound = {
        workflowId: string;
        running: boolean;
        cursor?: string | undefined;
        pageSize?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InstancesListRequest> = z.object(
        {
            workflowId: z.string(),
            running: z.boolean(),
            cursor: z.string().optional(),
            pageSize: z.number().int().optional(),
        }
    );
}

/** @internal */
export namespace Cursor$ {
    export const inboundSchema: z.ZodType<Cursor, z.ZodTypeDef, unknown> = z.object({
        next: z.string().optional(),
        data: z.array(components.WorkflowInstance$.inboundSchema),
    });

    export type Outbound = {
        next?: string | undefined;
        data: Array<components.WorkflowInstance$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Cursor> = z.object({
        next: z.string().optional(),
        data: z.array(components.WorkflowInstance$.outboundSchema),
    });
}

/** @internal */
export namespace InstancesListResponseBody$ {
    export const inboundSchema: z.ZodType<InstancesListResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => Cursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: Cursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InstancesListResponseBody> =
        z.object({
            cursor: z.lazy(() => Cursor$.outboundSchema),
        });
}

/** @internal */
export namespace InstancesListResponse$ {
    export const inboundSchema: z.ZodType<InstancesListResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => InstancesListResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: InstancesListResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InstancesListResponse> = z
        .object({
            result: z.lazy(() => InstancesListResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
