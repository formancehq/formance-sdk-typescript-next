/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type InstancesSendRequestBody = {
    name: string;
};

export type InstancesSendRequest = {
    id: string;
    requestBody: InstancesSendRequestBody;
};

/** @internal */
export namespace InstancesSendRequestBody$ {
    export const inboundSchema: z.ZodType<InstancesSendRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            name: z.string(),
        });

    export type Outbound = {
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InstancesSendRequestBody> =
        z.object({
            name: z.string(),
        });
}

/** @internal */
export namespace InstancesSendRequest$ {
    export const inboundSchema: z.ZodType<InstancesSendRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            RequestBody: z.lazy(() => InstancesSendRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        id: string;
        RequestBody: InstancesSendRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InstancesSendRequest> = z
        .object({
            id: z.string(),
            requestBody: z.lazy(() => InstancesSendRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}
