/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type TriggersTestRequest = {
    id: string;
    requestBody: { [k: string]: any };
};

/**
 * The request has succeeded.
 */
export type TriggersTestResponseBody = {
    data: components.TriggerTest;
};

/** @internal */
export namespace TriggersTestRequest$ {
    export const inboundSchema: z.ZodType<TriggersTestRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            RequestBody: z.record(z.any()),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        id: string;
        RequestBody: { [k: string]: any };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TriggersTestRequest> = z
        .object({
            id: z.string(),
            requestBody: z.record(z.any()),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace TriggersTestResponseBody$ {
    export const inboundSchema: z.ZodType<TriggersTestResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: components.TriggerTest$.inboundSchema,
        });

    export type Outbound = {
        data: components.TriggerTest$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TriggersTestResponseBody> =
        z.object({
            data: components.TriggerTest$.outboundSchema,
        });
}
