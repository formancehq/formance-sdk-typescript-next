/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type WorkflowsListRequest = {
    cursor?: string | undefined;
    pageSize?: number | undefined;
};

export type WorkflowsListCursor = {
    next?: string | undefined;
    data: Array<components.Workflow>;
};

/**
 * The request has succeeded.
 */
export type WorkflowsListResponseBody = {
    cursor: WorkflowsListCursor;
};

export type WorkflowsListResponse = {
    result: WorkflowsListResponseBody;
};

/** @internal */
export namespace WorkflowsListRequest$ {
    export const inboundSchema: z.ZodType<WorkflowsListRequest, z.ZodTypeDef, unknown> = z.object({
        cursor: z.string().optional(),
        pageSize: z.number().int().optional(),
    });

    export type Outbound = {
        cursor?: string | undefined;
        pageSize?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowsListRequest> = z.object(
        {
            cursor: z.string().optional(),
            pageSize: z.number().int().optional(),
        }
    );
}

/** @internal */
export namespace WorkflowsListCursor$ {
    export const inboundSchema: z.ZodType<WorkflowsListCursor, z.ZodTypeDef, unknown> = z.object({
        next: z.string().optional(),
        data: z.array(components.Workflow$.inboundSchema),
    });

    export type Outbound = {
        next?: string | undefined;
        data: Array<components.Workflow$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowsListCursor> = z.object({
        next: z.string().optional(),
        data: z.array(components.Workflow$.outboundSchema),
    });
}

/** @internal */
export namespace WorkflowsListResponseBody$ {
    export const inboundSchema: z.ZodType<WorkflowsListResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => WorkflowsListCursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: WorkflowsListCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowsListResponseBody> =
        z.object({
            cursor: z.lazy(() => WorkflowsListCursor$.outboundSchema),
        });
}

/** @internal */
export namespace WorkflowsListResponse$ {
    export const inboundSchema: z.ZodType<WorkflowsListResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => WorkflowsListResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: WorkflowsListResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowsListResponse> = z
        .object({
            result: z.lazy(() => WorkflowsListResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
