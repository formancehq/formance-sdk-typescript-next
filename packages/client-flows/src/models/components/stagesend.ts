/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Amount = {
    asset: string;
    amount: number;
};

export type Paymnts = {
    psp: string;
};

export type Three = {
    paymnts: Paymnts;
};

export type Account = {
    id: string;
    ledger?: string | undefined;
};

export type Two = {
    account: Account;
};

export type Wallet = {
    id: string;
    balance?: string | undefined;
};

export type One = {
    wallet: Wallet;
};

export type Destination = One | Two | Three;

export type SourcePaymnts = {
    id: string;
};

export type Source3 = {
    paymnts: SourcePaymnts;
};

export type SourceAccount = {
    id: string;
    ledger?: string | undefined;
};

export type Source2 = {
    account: SourceAccount;
};

export type SourceWallet = {
    id: string;
    balance?: string | undefined;
};

export type Source1 = {
    wallet: SourceWallet;
};

export type Source = Source1 | Source2 | Source3;

export type StageSend = {
    amount?: Amount | undefined;
    destination: One | Two | Three;
    source: Source1 | Source2 | Source3;
    metadata?: { [k: string]: string } | undefined;
    timestamp: Date;
};

/** @internal */
export namespace Amount$ {
    export const inboundSchema: z.ZodType<Amount, z.ZodTypeDef, unknown> = z.object({
        asset: z.string(),
        amount: z.number().int(),
    });

    export type Outbound = {
        asset: string;
        amount: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Amount> = z.object({
        asset: z.string(),
        amount: z.number().int(),
    });
}

/** @internal */
export namespace Paymnts$ {
    export const inboundSchema: z.ZodType<Paymnts, z.ZodTypeDef, unknown> = z.object({
        psp: z.string(),
    });

    export type Outbound = {
        psp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Paymnts> = z.object({
        psp: z.string(),
    });
}

/** @internal */
export namespace Three$ {
    export const inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z.object({
        paymnts: z.lazy(() => Paymnts$.inboundSchema),
    });

    export type Outbound = {
        paymnts: Paymnts$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Three> = z.object({
        paymnts: z.lazy(() => Paymnts$.outboundSchema),
    });
}

/** @internal */
export namespace Account$ {
    export const inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        ledger: z.string().optional(),
    });

    export type Outbound = {
        id: string;
        ledger?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Account> = z.object({
        id: z.string(),
        ledger: z.string().optional(),
    });
}

/** @internal */
export namespace Two$ {
    export const inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z.object({
        account: z.lazy(() => Account$.inboundSchema),
    });

    export type Outbound = {
        account: Account$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Two> = z.object({
        account: z.lazy(() => Account$.outboundSchema),
    });
}

/** @internal */
export namespace Wallet$ {
    export const inboundSchema: z.ZodType<Wallet, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        balance: z.string().optional(),
    });

    export type Outbound = {
        id: string;
        balance?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Wallet> = z.object({
        id: z.string(),
        balance: z.string().optional(),
    });
}

/** @internal */
export namespace One$ {
    export const inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z.object({
        wallet: z.lazy(() => Wallet$.inboundSchema),
    });

    export type Outbound = {
        wallet: Wallet$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, One> = z.object({
        wallet: z.lazy(() => Wallet$.outboundSchema),
    });
}

/** @internal */
export namespace Destination$ {
    export const inboundSchema: z.ZodType<Destination, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => One$.inboundSchema),
        z.lazy(() => Two$.inboundSchema),
        z.lazy(() => Three$.inboundSchema),
    ]);

    export type Outbound = One$.Outbound | Two$.Outbound | Three$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Destination> = z.union([
        z.lazy(() => One$.outboundSchema),
        z.lazy(() => Two$.outboundSchema),
        z.lazy(() => Three$.outboundSchema),
    ]);
}

/** @internal */
export namespace SourcePaymnts$ {
    export const inboundSchema: z.ZodType<SourcePaymnts, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
    });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SourcePaymnts> = z.object({
        id: z.string(),
    });
}

/** @internal */
export namespace Source3$ {
    export const inboundSchema: z.ZodType<Source3, z.ZodTypeDef, unknown> = z.object({
        paymnts: z.lazy(() => SourcePaymnts$.inboundSchema),
    });

    export type Outbound = {
        paymnts: SourcePaymnts$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Source3> = z.object({
        paymnts: z.lazy(() => SourcePaymnts$.outboundSchema),
    });
}

/** @internal */
export namespace SourceAccount$ {
    export const inboundSchema: z.ZodType<SourceAccount, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        ledger: z.string().optional(),
    });

    export type Outbound = {
        id: string;
        ledger?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SourceAccount> = z.object({
        id: z.string(),
        ledger: z.string().optional(),
    });
}

/** @internal */
export namespace Source2$ {
    export const inboundSchema: z.ZodType<Source2, z.ZodTypeDef, unknown> = z.object({
        account: z.lazy(() => SourceAccount$.inboundSchema),
    });

    export type Outbound = {
        account: SourceAccount$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Source2> = z.object({
        account: z.lazy(() => SourceAccount$.outboundSchema),
    });
}

/** @internal */
export namespace SourceWallet$ {
    export const inboundSchema: z.ZodType<SourceWallet, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        balance: z.string().optional(),
    });

    export type Outbound = {
        id: string;
        balance?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SourceWallet> = z.object({
        id: z.string(),
        balance: z.string().optional(),
    });
}

/** @internal */
export namespace Source1$ {
    export const inboundSchema: z.ZodType<Source1, z.ZodTypeDef, unknown> = z.object({
        wallet: z.lazy(() => SourceWallet$.inboundSchema),
    });

    export type Outbound = {
        wallet: SourceWallet$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Source1> = z.object({
        wallet: z.lazy(() => SourceWallet$.outboundSchema),
    });
}

/** @internal */
export namespace Source$ {
    export const inboundSchema: z.ZodType<Source, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Source1$.inboundSchema),
        z.lazy(() => Source2$.inboundSchema),
        z.lazy(() => Source3$.inboundSchema),
    ]);

    export type Outbound = Source1$.Outbound | Source2$.Outbound | Source3$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Source> = z.union([
        z.lazy(() => Source1$.outboundSchema),
        z.lazy(() => Source2$.outboundSchema),
        z.lazy(() => Source3$.outboundSchema),
    ]);
}

/** @internal */
export namespace StageSend$ {
    export const inboundSchema: z.ZodType<StageSend, z.ZodTypeDef, unknown> = z.object({
        amount: z.lazy(() => Amount$.inboundSchema).optional(),
        destination: z.union([
            z.lazy(() => One$.inboundSchema),
            z.lazy(() => Two$.inboundSchema),
            z.lazy(() => Three$.inboundSchema),
        ]),
        source: z.union([
            z.lazy(() => Source1$.inboundSchema),
            z.lazy(() => Source2$.inboundSchema),
            z.lazy(() => Source3$.inboundSchema),
        ]),
        metadata: z.record(z.string()).optional(),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    });

    export type Outbound = {
        amount?: Amount$.Outbound | undefined;
        destination: One$.Outbound | Two$.Outbound | Three$.Outbound;
        source: Source1$.Outbound | Source2$.Outbound | Source3$.Outbound;
        metadata?: { [k: string]: string } | undefined;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StageSend> = z.object({
        amount: z.lazy(() => Amount$.outboundSchema).optional(),
        destination: z.union([
            z.lazy(() => One$.outboundSchema),
            z.lazy(() => Two$.outboundSchema),
            z.lazy(() => Three$.outboundSchema),
        ]),
        source: z.union([
            z.lazy(() => Source1$.outboundSchema),
            z.lazy(() => Source2$.outboundSchema),
            z.lazy(() => Source3$.outboundSchema),
        ]),
        metadata: z.record(z.string()).optional(),
        timestamp: z.date().transform((v) => v.toISOString()),
    });
}
