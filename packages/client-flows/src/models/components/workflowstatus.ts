/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type WorkflowStatus = {
    stage: number;
    instanceId: string;
    startedAt: Date;
    terminatedAt?: Date | undefined;
    error?: string | undefined;
};

/** @internal */
export namespace WorkflowStatus$ {
    export const inboundSchema: z.ZodType<WorkflowStatus, z.ZodTypeDef, unknown> = z.object({
        stage: z.number().int(),
        instanceId: z.string(),
        startedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        terminatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        error: z.string().optional(),
    });

    export type Outbound = {
        stage: number;
        instanceId: string;
        startedAt: string;
        terminatedAt?: string | undefined;
        error?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowStatus> = z.object({
        stage: z.number().int(),
        instanceId: z.string(),
        startedAt: z.date().transform((v) => v.toISOString()),
        terminatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        error: z.string().optional(),
    });
}
