/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentsPaymentStatus, PaymentsPaymentStatus$ } from "./paymentspaymentstatus.js";
import * as z from "zod";

export type PaymentsPaymentAdjustment = {
    reference: string;
    createdAt: Date;
    status: PaymentsPaymentStatus;
    amount: number;
    raw: { [k: string]: any };
};

/** @internal */
export namespace PaymentsPaymentAdjustment$ {
    export const inboundSchema: z.ZodType<PaymentsPaymentAdjustment, z.ZodTypeDef, unknown> =
        z.object({
            reference: z.string(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            status: PaymentsPaymentStatus$.inboundSchema,
            amount: z.number().int(),
            raw: z.record(z.any()),
        });

    export type Outbound = {
        reference: string;
        createdAt: string;
        status: string;
        amount: number;
        raw: { [k: string]: any };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsPaymentAdjustment> =
        z.object({
            reference: z.string(),
            createdAt: z.date().transform((v) => v.toISOString()),
            status: PaymentsPaymentStatus$.outboundSchema,
            amount: z.number().int(),
            raw: z.record(z.any()),
        });
}
