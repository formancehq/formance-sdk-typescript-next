/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    PaymentsPaymentStatus,
    PaymentsPaymentStatus$inboundSchema,
    PaymentsPaymentStatus$outboundSchema,
} from "./paymentspaymentstatus.js";
import * as z from "zod";

export type PaymentsPaymentAdjustment = {
    reference: string;
    createdAt: Date;
    status: PaymentsPaymentStatus;
    amount: number;
    raw: { [k: string]: any };
};

/** @internal */
export const PaymentsPaymentAdjustment$inboundSchema: z.ZodType<
    PaymentsPaymentAdjustment,
    z.ZodTypeDef,
    unknown
> = z.object({
    reference: z.string(),
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    status: PaymentsPaymentStatus$inboundSchema,
    amount: z.number().int(),
    raw: z.record(z.any()),
});

/** @internal */
export type PaymentsPaymentAdjustment$Outbound = {
    reference: string;
    createdAt: string;
    status: string;
    amount: number;
    raw: { [k: string]: any };
};

/** @internal */
export const PaymentsPaymentAdjustment$outboundSchema: z.ZodType<
    PaymentsPaymentAdjustment$Outbound,
    z.ZodTypeDef,
    PaymentsPaymentAdjustment
> = z.object({
    reference: z.string(),
    createdAt: z.date().transform((v) => v.toISOString()),
    status: PaymentsPaymentStatus$outboundSchema,
    amount: z.number().int(),
    raw: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsPaymentAdjustment$ {
    /** @deprecated use `PaymentsPaymentAdjustment$inboundSchema` instead. */
    export const inboundSchema = PaymentsPaymentAdjustment$inboundSchema;
    /** @deprecated use `PaymentsPaymentAdjustment$outboundSchema` instead. */
    export const outboundSchema = PaymentsPaymentAdjustment$outboundSchema;
    /** @deprecated use `PaymentsPaymentAdjustment$Outbound` instead. */
    export type Outbound = PaymentsPaymentAdjustment$Outbound;
}
