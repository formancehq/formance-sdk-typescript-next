/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WorkflowStatus, WorkflowStatus$ } from "./workflowstatus.js";
import * as z from "zod";

export type WorkflowInstance = {
    workflowId: string;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    status?: WorkflowStatus | undefined;
    terminated: boolean;
    terminatedAt?: Date | undefined;
    error?: Date | undefined;
};

/** @internal */
export namespace WorkflowInstance$ {
    export const inboundSchema: z.ZodType<WorkflowInstance, z.ZodTypeDef, unknown> = z.object({
        workflowId: z.string(),
        id: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        status: WorkflowStatus$.inboundSchema.optional(),
        terminated: z.boolean(),
        terminatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        error: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    });

    export type Outbound = {
        workflowId: string;
        id: string;
        createdAt: string;
        updatedAt: string;
        status?: WorkflowStatus$.Outbound | undefined;
        terminated: boolean;
        terminatedAt?: string | undefined;
        error?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowInstance> = z.object({
        workflowId: z.string(),
        id: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        updatedAt: z.date().transform((v) => v.toISOString()),
        status: WorkflowStatus$.outboundSchema.optional(),
        terminated: z.boolean(),
        terminatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        error: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    });
}
