/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Trigger = {
    event: string;
    workflowId: string;
    id: string;
    createdAt: Date;
    filter?: string | undefined;
    name?: string | undefined;
    vars?: { [k: string]: any } | undefined;
};

/** @internal */
export namespace Trigger$ {
    export const inboundSchema: z.ZodType<Trigger, z.ZodTypeDef, unknown> = z.object({
        event: z.string(),
        workflowId: z.string(),
        id: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        filter: z.string().optional(),
        name: z.string().optional(),
        vars: z.record(z.any()).optional(),
    });

    export type Outbound = {
        event: string;
        workflowId: string;
        id: string;
        createdAt: string;
        filter?: string | undefined;
        name?: string | undefined;
        vars?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Trigger> = z.object({
        event: z.string(),
        workflowId: z.string(),
        id: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        filter: z.string().optional(),
        name: z.string().optional(),
        vars: z.record(z.any()).optional(),
    });
}
