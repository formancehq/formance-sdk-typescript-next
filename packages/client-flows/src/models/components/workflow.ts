/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WorkflowConfig, WorkflowConfig$ } from "./workflowconfig.js";
import * as z from "zod";

export type Workflow = {
    config: WorkflowConfig;
    createdAt: Date;
    updatedAt: Date;
    id: string;
};

/** @internal */
export namespace Workflow$ {
    export const inboundSchema: z.ZodType<Workflow, z.ZodTypeDef, unknown> = z.object({
        config: WorkflowConfig$.inboundSchema,
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        id: z.string(),
    });

    export type Outbound = {
        config: WorkflowConfig$.Outbound;
        createdAt: string;
        updatedAt: string;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Workflow> = z.object({
        config: WorkflowConfig$.outboundSchema,
        createdAt: z.date().transform((v) => v.toISOString()),
        updatedAt: z.date().transform((v) => v.toISOString()),
        id: z.string(),
    });
}
