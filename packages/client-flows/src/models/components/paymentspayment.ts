/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentsConnector, PaymentsConnector$ } from "./paymentsconnector.js";
import {
    PaymentsPaymentAdjustment,
    PaymentsPaymentAdjustment$,
} from "./paymentspaymentadjustment.js";
import { PaymentsPaymentScheme, PaymentsPaymentScheme$ } from "./paymentspaymentscheme.js";
import { PaymentsPaymentStatus, PaymentsPaymentStatus$ } from "./paymentspaymentstatus.js";
import { PaymentsPaymentType, PaymentsPaymentType$ } from "./paymentspaymenttype.js";
import * as z from "zod";

export type PaymentsPayment = {
    reference: string;
    connectorID: string;
    amount: number;
    type: PaymentsPaymentType;
    status: PaymentsPaymentStatus;
    scheme: PaymentsPaymentScheme;
    asset: string;
    id: string;
    sourceAccountID: string;
    destinationAccountID: string;
    provider?: PaymentsConnector | undefined;
    initialAmount: number;
    createdAt: Date;
    raw: { [k: string]: any };
    adjustments: Array<PaymentsPaymentAdjustment>;
    metadata?: { [k: string]: string } | undefined;
};

/** @internal */
export namespace PaymentsPayment$ {
    export const inboundSchema: z.ZodType<PaymentsPayment, z.ZodTypeDef, unknown> = z.object({
        reference: z.string(),
        connectorID: z.string(),
        amount: z.number().int(),
        type: PaymentsPaymentType$.inboundSchema,
        status: PaymentsPaymentStatus$.inboundSchema,
        scheme: PaymentsPaymentScheme$.inboundSchema,
        asset: z.string(),
        id: z.string(),
        sourceAccountID: z.string(),
        destinationAccountID: z.string(),
        provider: PaymentsConnector$.inboundSchema.optional(),
        initialAmount: z.number().int(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        raw: z.record(z.any()),
        adjustments: z.array(PaymentsPaymentAdjustment$.inboundSchema),
        metadata: z.record(z.string()).optional(),
    });

    export type Outbound = {
        reference: string;
        connectorID: string;
        amount: number;
        type: string;
        status: string;
        scheme: string;
        asset: string;
        id: string;
        sourceAccountID: string;
        destinationAccountID: string;
        provider?: string | undefined;
        initialAmount: number;
        createdAt: string;
        raw: { [k: string]: any };
        adjustments: Array<PaymentsPaymentAdjustment$.Outbound>;
        metadata?: { [k: string]: string } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsPayment> = z.object({
        reference: z.string(),
        connectorID: z.string(),
        amount: z.number().int(),
        type: PaymentsPaymentType$.outboundSchema,
        status: PaymentsPaymentStatus$.outboundSchema,
        scheme: PaymentsPaymentScheme$.outboundSchema,
        asset: z.string(),
        id: z.string(),
        sourceAccountID: z.string(),
        destinationAccountID: z.string(),
        provider: PaymentsConnector$.outboundSchema.optional(),
        initialAmount: z.number().int(),
        createdAt: z.date().transform((v) => v.toISOString()),
        raw: z.record(z.any()),
        adjustments: z.array(PaymentsPaymentAdjustment$.outboundSchema),
        metadata: z.record(z.string()).optional(),
    });
}
