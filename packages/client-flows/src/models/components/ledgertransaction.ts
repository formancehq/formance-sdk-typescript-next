/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LedgerPosting, LedgerPosting$ } from "./ledgerposting.js";
import * as z from "zod";

export type LedgerTransaction = {
    timestamp: Date;
    postings: Array<LedgerPosting>;
    reference?: string | undefined;
    metadata: { [k: string]: string };
    id: string;
    reverted: boolean;
};

/** @internal */
export namespace LedgerTransaction$ {
    export const inboundSchema: z.ZodType<LedgerTransaction, z.ZodTypeDef, unknown> = z.object({
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        postings: z.array(LedgerPosting$.inboundSchema),
        reference: z.string().optional(),
        metadata: z.record(z.string()),
        id: z.string(),
        reverted: z.boolean(),
    });

    export type Outbound = {
        timestamp: string;
        postings: Array<LedgerPosting$.Outbound>;
        reference?: string | undefined;
        metadata: { [k: string]: string };
        id: string;
        reverted: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgerTransaction> = z.object({
        timestamp: z.date().transform((v) => v.toISOString()),
        postings: z.array(LedgerPosting$.outboundSchema),
        reference: z.string().optional(),
        metadata: z.record(z.string()),
        id: z.string(),
        reverted: z.boolean(),
    });
}
