/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { LedgerAccount, LedgerAccount$ } from "./ledgeraccount.js";
import {
    LedgerCreateTransactionWithNumscript,
    LedgerCreateTransactionWithNumscript$,
} from "./ledgercreatetransactionwithnumscript.js";
import {
    LedgerCreateTransactionWithPostings,
    LedgerCreateTransactionWithPostings$,
} from "./ledgercreatetransactionwithpostings.js";
import { LedgerTransaction, LedgerTransaction$ } from "./ledgertransaction.js";
import { PaymentsPayment, PaymentsPayment$ } from "./paymentspayment.js";
import { WalletsCreditWalletInput, WalletsCreditWalletInput$ } from "./walletscreditwalletinput.js";
import { WalletsDebitWalletInput, WalletsDebitWalletInput$ } from "./walletsdebitwalletinput.js";
import { WalletsHold, WalletsHold$ } from "./walletshold.js";
import { WalletsWallet, WalletsWallet$ } from "./walletswallet.js";
import * as z from "zod";

export type StripeTransfer = {
    connectorId?: string | undefined;
    amount?: number | undefined;
    asset?: string | undefined;
    destination?: string | undefined;
    waitingValidation?: boolean | undefined;
    metadata?: { [k: string]: string } | undefined;
};

export type Ten = {
    stripeTransfer: StripeTransfer;
};

export type ListWallets = {
    name?: string | undefined;
};

export type Nine = {
    listWallets: ListWallets;
};

export type VoidHold = {
    id: string;
};

export type Eight = {
    voidHold: VoidHold;
};

export type GetWallet = {
    id: string;
};

export type Seven = {
    getWallet: GetWallet;
};

export type DebitWallet = {
    id?: string | undefined;
    data: WalletsDebitWalletInput;
};

export type Six = {
    debitWallet: DebitWallet;
};

export type CreditWallet = {
    id?: string | undefined;
    data: WalletsCreditWalletInput;
};

export type Five = {
    creditWallet: CreditWallet;
};

export type ConfirmHold = {
    id: string;
};

export type Four = {
    confirmHold: ConfirmHold;
};

export type GetPayment = {
    id: string;
};

export type Input3 = {
    getPayment: GetPayment;
};

export type Data = LedgerCreateTransactionWithPostings | LedgerCreateTransactionWithNumscript;

export type CreateTransaction = {
    ledger?: string | undefined;
    data: LedgerCreateTransactionWithPostings | LedgerCreateTransactionWithNumscript;
};

export type Input2 = {
    createTransaction: CreateTransaction;
};

export type GetAccount = {
    id: string;
    ledger: string;
};

export type Input1 = {
    getAccount: GetAccount;
};

export type WorkflowInstanceHistoryStageInput =
    | Input1
    | Input2
    | Input3
    | Four
    | Five
    | Six
    | Seven
    | Eight
    | Nine
    | Ten;

export type Cursor = {
    next?: string | undefined;
    data: Array<WalletsWallet>;
};

export type WorkflowInstanceHistoryStageOutputData = {
    cursor: Cursor;
};

export type ListWallet = {
    data: WorkflowInstanceHistoryStageOutputData;
};

export type Output6 = {
    listWallet: ListWallet;
};

export type Balances = {
    assets: { [k: string]: number };
};

export type OutputData = {
    id: string;
    metadata: { [k: string]: string };
    name: string;
    createdAt: Date;
    ledger: string;
    balances: { [k: string]: Balances };
};

export type OutputGetWallet = {
    data: OutputData;
};

export type Output5 = {
    getWallet: OutputGetWallet;
};

export type OutputDebitWallet = {
    data: WalletsHold;
};

export type Output4 = {
    debitWallet: OutputDebitWallet;
};

export type OutputGetPayment = {
    data: PaymentsPayment;
};

export type Output3 = {
    getPayment: OutputGetPayment;
};

export type OutputCreateTransaction = {
    data: Array<LedgerTransaction>;
};

export type Output2 = {
    createTransaction: OutputCreateTransaction;
};

export type OutputGetAccount = {
    data: LedgerAccount;
};

export type Output1 = {
    getAccount: OutputGetAccount;
};

export type Output = Output1 | Output2 | Output3 | Output4 | Output5 | Output6;

export type WorkflowInstanceHistoryStage = {
    name: string;
    input: Input1 | Input2 | Input3 | Four | Five | Six | Seven | Eight | Nine | Ten;
    output?: Output1 | Output2 | Output3 | Output4 | Output5 | Output6 | undefined;
    error?: string | undefined;
    terminated: boolean;
    startedAt: Date;
    terminatedAt?: Date | undefined;
    astFailure?: string | undefined;
    attempt: number;
    nextExecution?: Date | undefined;
};

/** @internal */
export namespace StripeTransfer$ {
    export const inboundSchema: z.ZodType<StripeTransfer, z.ZodTypeDef, unknown> = z.object({
        connectorId: z.string().optional(),
        amount: z.number().int().optional(),
        asset: z.string().optional(),
        destination: z.string().optional(),
        waitingValidation: z.boolean().optional(),
        metadata: z.record(z.string()).optional(),
    });

    export type Outbound = {
        connectorId?: string | undefined;
        amount?: number | undefined;
        asset?: string | undefined;
        destination?: string | undefined;
        waitingValidation?: boolean | undefined;
        metadata?: { [k: string]: string } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StripeTransfer> = z.object({
        connectorId: z.string().optional(),
        amount: z.number().int().optional(),
        asset: z.string().optional(),
        destination: z.string().optional(),
        waitingValidation: z.boolean().optional(),
        metadata: z.record(z.string()).optional(),
    });
}

/** @internal */
export namespace Ten$ {
    export const inboundSchema: z.ZodType<Ten, z.ZodTypeDef, unknown> = z
        .object({
            StripeTransfer: z.lazy(() => StripeTransfer$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                StripeTransfer: "stripeTransfer",
            });
        });

    export type Outbound = {
        StripeTransfer: StripeTransfer$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Ten> = z
        .object({
            stripeTransfer: z.lazy(() => StripeTransfer$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                stripeTransfer: "StripeTransfer",
            });
        });
}

/** @internal */
export namespace ListWallets$ {
    export const inboundSchema: z.ZodType<ListWallets, z.ZodTypeDef, unknown> = z.object({
        name: z.string().optional(),
    });

    export type Outbound = {
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListWallets> = z.object({
        name: z.string().optional(),
    });
}

/** @internal */
export namespace Nine$ {
    export const inboundSchema: z.ZodType<Nine, z.ZodTypeDef, unknown> = z
        .object({
            ListWallets: z.lazy(() => ListWallets$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                ListWallets: "listWallets",
            });
        });

    export type Outbound = {
        ListWallets: ListWallets$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Nine> = z
        .object({
            listWallets: z.lazy(() => ListWallets$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                listWallets: "ListWallets",
            });
        });
}

/** @internal */
export namespace VoidHold$ {
    export const inboundSchema: z.ZodType<VoidHold, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
    });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VoidHold> = z.object({
        id: z.string(),
    });
}

/** @internal */
export namespace Eight$ {
    export const inboundSchema: z.ZodType<Eight, z.ZodTypeDef, unknown> = z
        .object({
            VoidHold: z.lazy(() => VoidHold$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                VoidHold: "voidHold",
            });
        });

    export type Outbound = {
        VoidHold: VoidHold$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Eight> = z
        .object({
            voidHold: z.lazy(() => VoidHold$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                voidHold: "VoidHold",
            });
        });
}

/** @internal */
export namespace GetWallet$ {
    export const inboundSchema: z.ZodType<GetWallet, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
    });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWallet> = z.object({
        id: z.string(),
    });
}

/** @internal */
export namespace Seven$ {
    export const inboundSchema: z.ZodType<Seven, z.ZodTypeDef, unknown> = z
        .object({
            GetWallet: z.lazy(() => GetWallet$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                GetWallet: "getWallet",
            });
        });

    export type Outbound = {
        GetWallet: GetWallet$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Seven> = z
        .object({
            getWallet: z.lazy(() => GetWallet$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                getWallet: "GetWallet",
            });
        });
}

/** @internal */
export namespace DebitWallet$ {
    export const inboundSchema: z.ZodType<DebitWallet, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
        data: WalletsDebitWalletInput$.inboundSchema,
    });

    export type Outbound = {
        id?: string | undefined;
        data: WalletsDebitWalletInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DebitWallet> = z.object({
        id: z.string().optional(),
        data: WalletsDebitWalletInput$.outboundSchema,
    });
}

/** @internal */
export namespace Six$ {
    export const inboundSchema: z.ZodType<Six, z.ZodTypeDef, unknown> = z
        .object({
            DebitWallet: z.lazy(() => DebitWallet$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                DebitWallet: "debitWallet",
            });
        });

    export type Outbound = {
        DebitWallet: DebitWallet$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Six> = z
        .object({
            debitWallet: z.lazy(() => DebitWallet$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                debitWallet: "DebitWallet",
            });
        });
}

/** @internal */
export namespace CreditWallet$ {
    export const inboundSchema: z.ZodType<CreditWallet, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
        data: WalletsCreditWalletInput$.inboundSchema,
    });

    export type Outbound = {
        id?: string | undefined;
        data: WalletsCreditWalletInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreditWallet> = z.object({
        id: z.string().optional(),
        data: WalletsCreditWalletInput$.outboundSchema,
    });
}

/** @internal */
export namespace Five$ {
    export const inboundSchema: z.ZodType<Five, z.ZodTypeDef, unknown> = z
        .object({
            CreditWallet: z.lazy(() => CreditWallet$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                CreditWallet: "creditWallet",
            });
        });

    export type Outbound = {
        CreditWallet: CreditWallet$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Five> = z
        .object({
            creditWallet: z.lazy(() => CreditWallet$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                creditWallet: "CreditWallet",
            });
        });
}

/** @internal */
export namespace ConfirmHold$ {
    export const inboundSchema: z.ZodType<ConfirmHold, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
    });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConfirmHold> = z.object({
        id: z.string(),
    });
}

/** @internal */
export namespace Four$ {
    export const inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
        .object({
            ConfirmHold: z.lazy(() => ConfirmHold$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                ConfirmHold: "confirmHold",
            });
        });

    export type Outbound = {
        ConfirmHold: ConfirmHold$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Four> = z
        .object({
            confirmHold: z.lazy(() => ConfirmHold$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                confirmHold: "ConfirmHold",
            });
        });
}

/** @internal */
export namespace GetPayment$ {
    export const inboundSchema: z.ZodType<GetPayment, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
    });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPayment> = z.object({
        id: z.string(),
    });
}

/** @internal */
export namespace Input3$ {
    export const inboundSchema: z.ZodType<Input3, z.ZodTypeDef, unknown> = z
        .object({
            GetPayment: z.lazy(() => GetPayment$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                GetPayment: "getPayment",
            });
        });

    export type Outbound = {
        GetPayment: GetPayment$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Input3> = z
        .object({
            getPayment: z.lazy(() => GetPayment$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                getPayment: "GetPayment",
            });
        });
}

/** @internal */
export namespace Data$ {
    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z.union([
        LedgerCreateTransactionWithPostings$.inboundSchema,
        LedgerCreateTransactionWithNumscript$.inboundSchema,
    ]);

    export type Outbound =
        | LedgerCreateTransactionWithPostings$.Outbound
        | LedgerCreateTransactionWithNumscript$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z.union([
        LedgerCreateTransactionWithPostings$.outboundSchema,
        LedgerCreateTransactionWithNumscript$.outboundSchema,
    ]);
}

/** @internal */
export namespace CreateTransaction$ {
    export const inboundSchema: z.ZodType<CreateTransaction, z.ZodTypeDef, unknown> = z.object({
        ledger: z.string().optional(),
        data: z.union([
            LedgerCreateTransactionWithPostings$.inboundSchema,
            LedgerCreateTransactionWithNumscript$.inboundSchema,
        ]),
    });

    export type Outbound = {
        ledger?: string | undefined;
        data:
            | LedgerCreateTransactionWithPostings$.Outbound
            | LedgerCreateTransactionWithNumscript$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransaction> = z.object({
        ledger: z.string().optional(),
        data: z.union([
            LedgerCreateTransactionWithPostings$.outboundSchema,
            LedgerCreateTransactionWithNumscript$.outboundSchema,
        ]),
    });
}

/** @internal */
export namespace Input2$ {
    export const inboundSchema: z.ZodType<Input2, z.ZodTypeDef, unknown> = z
        .object({
            CreateTransaction: z.lazy(() => CreateTransaction$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                CreateTransaction: "createTransaction",
            });
        });

    export type Outbound = {
        CreateTransaction: CreateTransaction$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Input2> = z
        .object({
            createTransaction: z.lazy(() => CreateTransaction$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                createTransaction: "CreateTransaction",
            });
        });
}

/** @internal */
export namespace GetAccount$ {
    export const inboundSchema: z.ZodType<GetAccount, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        ledger: z.string(),
    });

    export type Outbound = {
        id: string;
        ledger: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccount> = z.object({
        id: z.string(),
        ledger: z.string(),
    });
}

/** @internal */
export namespace Input1$ {
    export const inboundSchema: z.ZodType<Input1, z.ZodTypeDef, unknown> = z
        .object({
            GetAccount: z.lazy(() => GetAccount$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                GetAccount: "getAccount",
            });
        });

    export type Outbound = {
        GetAccount: GetAccount$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Input1> = z
        .object({
            getAccount: z.lazy(() => GetAccount$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                getAccount: "GetAccount",
            });
        });
}

/** @internal */
export namespace WorkflowInstanceHistoryStageInput$ {
    export const inboundSchema: z.ZodType<
        WorkflowInstanceHistoryStageInput,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => Input1$.inboundSchema),
        z.lazy(() => Input2$.inboundSchema),
        z.lazy(() => Input3$.inboundSchema),
        z.lazy(() => Four$.inboundSchema),
        z.lazy(() => Five$.inboundSchema),
        z.lazy(() => Six$.inboundSchema),
        z.lazy(() => Seven$.inboundSchema),
        z.lazy(() => Eight$.inboundSchema),
        z.lazy(() => Nine$.inboundSchema),
        z.lazy(() => Ten$.inboundSchema),
    ]);

    export type Outbound =
        | Input1$.Outbound
        | Input2$.Outbound
        | Input3$.Outbound
        | Four$.Outbound
        | Five$.Outbound
        | Six$.Outbound
        | Seven$.Outbound
        | Eight$.Outbound
        | Nine$.Outbound
        | Ten$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        WorkflowInstanceHistoryStageInput
    > = z.union([
        z.lazy(() => Input1$.outboundSchema),
        z.lazy(() => Input2$.outboundSchema),
        z.lazy(() => Input3$.outboundSchema),
        z.lazy(() => Four$.outboundSchema),
        z.lazy(() => Five$.outboundSchema),
        z.lazy(() => Six$.outboundSchema),
        z.lazy(() => Seven$.outboundSchema),
        z.lazy(() => Eight$.outboundSchema),
        z.lazy(() => Nine$.outboundSchema),
        z.lazy(() => Ten$.outboundSchema),
    ]);
}

/** @internal */
export namespace Cursor$ {
    export const inboundSchema: z.ZodType<Cursor, z.ZodTypeDef, unknown> = z.object({
        next: z.string().optional(),
        data: z.array(WalletsWallet$.inboundSchema),
    });

    export type Outbound = {
        next?: string | undefined;
        data: Array<WalletsWallet$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Cursor> = z.object({
        next: z.string().optional(),
        data: z.array(WalletsWallet$.outboundSchema),
    });
}

/** @internal */
export namespace WorkflowInstanceHistoryStageOutputData$ {
    export const inboundSchema: z.ZodType<
        WorkflowInstanceHistoryStageOutputData,
        z.ZodTypeDef,
        unknown
    > = z.object({
        cursor: z.lazy(() => Cursor$.inboundSchema),
    });

    export type Outbound = {
        cursor: Cursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        WorkflowInstanceHistoryStageOutputData
    > = z.object({
        cursor: z.lazy(() => Cursor$.outboundSchema),
    });
}

/** @internal */
export namespace ListWallet$ {
    export const inboundSchema: z.ZodType<ListWallet, z.ZodTypeDef, unknown> = z.object({
        data: z.lazy(() => WorkflowInstanceHistoryStageOutputData$.inboundSchema),
    });

    export type Outbound = {
        data: WorkflowInstanceHistoryStageOutputData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListWallet> = z.object({
        data: z.lazy(() => WorkflowInstanceHistoryStageOutputData$.outboundSchema),
    });
}

/** @internal */
export namespace Output6$ {
    export const inboundSchema: z.ZodType<Output6, z.ZodTypeDef, unknown> = z
        .object({
            ListWallet: z.lazy(() => ListWallet$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                ListWallet: "listWallet",
            });
        });

    export type Outbound = {
        ListWallet: ListWallet$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Output6> = z
        .object({
            listWallet: z.lazy(() => ListWallet$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                listWallet: "ListWallet",
            });
        });
}

/** @internal */
export namespace Balances$ {
    export const inboundSchema: z.ZodType<Balances, z.ZodTypeDef, unknown> = z.object({
        assets: z.record(z.number().int()),
    });

    export type Outbound = {
        assets: { [k: string]: number };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Balances> = z.object({
        assets: z.record(z.number().int()),
    });
}

/** @internal */
export namespace OutputData$ {
    export const inboundSchema: z.ZodType<OutputData, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        metadata: z.record(z.string()),
        name: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        ledger: z.string(),
        balances: z.record(z.lazy(() => Balances$.inboundSchema)),
    });

    export type Outbound = {
        id: string;
        metadata: { [k: string]: string };
        name: string;
        createdAt: string;
        ledger: string;
        balances: { [k: string]: Balances$.Outbound };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OutputData> = z.object({
        id: z.string(),
        metadata: z.record(z.string()),
        name: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        ledger: z.string(),
        balances: z.record(z.lazy(() => Balances$.outboundSchema)),
    });
}

/** @internal */
export namespace OutputGetWallet$ {
    export const inboundSchema: z.ZodType<OutputGetWallet, z.ZodTypeDef, unknown> = z.object({
        data: z.lazy(() => OutputData$.inboundSchema),
    });

    export type Outbound = {
        data: OutputData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OutputGetWallet> = z.object({
        data: z.lazy(() => OutputData$.outboundSchema),
    });
}

/** @internal */
export namespace Output5$ {
    export const inboundSchema: z.ZodType<Output5, z.ZodTypeDef, unknown> = z
        .object({
            GetWallet: z.lazy(() => OutputGetWallet$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                GetWallet: "getWallet",
            });
        });

    export type Outbound = {
        GetWallet: OutputGetWallet$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Output5> = z
        .object({
            getWallet: z.lazy(() => OutputGetWallet$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                getWallet: "GetWallet",
            });
        });
}

/** @internal */
export namespace OutputDebitWallet$ {
    export const inboundSchema: z.ZodType<OutputDebitWallet, z.ZodTypeDef, unknown> = z.object({
        data: WalletsHold$.inboundSchema,
    });

    export type Outbound = {
        data: WalletsHold$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OutputDebitWallet> = z.object({
        data: WalletsHold$.outboundSchema,
    });
}

/** @internal */
export namespace Output4$ {
    export const inboundSchema: z.ZodType<Output4, z.ZodTypeDef, unknown> = z
        .object({
            DebitWallet: z.lazy(() => OutputDebitWallet$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                DebitWallet: "debitWallet",
            });
        });

    export type Outbound = {
        DebitWallet: OutputDebitWallet$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Output4> = z
        .object({
            debitWallet: z.lazy(() => OutputDebitWallet$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                debitWallet: "DebitWallet",
            });
        });
}

/** @internal */
export namespace OutputGetPayment$ {
    export const inboundSchema: z.ZodType<OutputGetPayment, z.ZodTypeDef, unknown> = z.object({
        data: PaymentsPayment$.inboundSchema,
    });

    export type Outbound = {
        data: PaymentsPayment$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OutputGetPayment> = z.object({
        data: PaymentsPayment$.outboundSchema,
    });
}

/** @internal */
export namespace Output3$ {
    export const inboundSchema: z.ZodType<Output3, z.ZodTypeDef, unknown> = z
        .object({
            GetPayment: z.lazy(() => OutputGetPayment$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                GetPayment: "getPayment",
            });
        });

    export type Outbound = {
        GetPayment: OutputGetPayment$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Output3> = z
        .object({
            getPayment: z.lazy(() => OutputGetPayment$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                getPayment: "GetPayment",
            });
        });
}

/** @internal */
export namespace OutputCreateTransaction$ {
    export const inboundSchema: z.ZodType<OutputCreateTransaction, z.ZodTypeDef, unknown> =
        z.object({
            data: z.array(LedgerTransaction$.inboundSchema),
        });

    export type Outbound = {
        data: Array<LedgerTransaction$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OutputCreateTransaction> =
        z.object({
            data: z.array(LedgerTransaction$.outboundSchema),
        });
}

/** @internal */
export namespace Output2$ {
    export const inboundSchema: z.ZodType<Output2, z.ZodTypeDef, unknown> = z
        .object({
            CreateTransaction: z.lazy(() => OutputCreateTransaction$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                CreateTransaction: "createTransaction",
            });
        });

    export type Outbound = {
        CreateTransaction: OutputCreateTransaction$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Output2> = z
        .object({
            createTransaction: z.lazy(() => OutputCreateTransaction$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                createTransaction: "CreateTransaction",
            });
        });
}

/** @internal */
export namespace OutputGetAccount$ {
    export const inboundSchema: z.ZodType<OutputGetAccount, z.ZodTypeDef, unknown> = z.object({
        data: LedgerAccount$.inboundSchema,
    });

    export type Outbound = {
        data: LedgerAccount$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OutputGetAccount> = z.object({
        data: LedgerAccount$.outboundSchema,
    });
}

/** @internal */
export namespace Output1$ {
    export const inboundSchema: z.ZodType<Output1, z.ZodTypeDef, unknown> = z
        .object({
            GetAccount: z.lazy(() => OutputGetAccount$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                GetAccount: "getAccount",
            });
        });

    export type Outbound = {
        GetAccount: OutputGetAccount$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Output1> = z
        .object({
            getAccount: z.lazy(() => OutputGetAccount$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                getAccount: "GetAccount",
            });
        });
}

/** @internal */
export namespace Output$ {
    export const inboundSchema: z.ZodType<Output, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Output1$.inboundSchema),
        z.lazy(() => Output2$.inboundSchema),
        z.lazy(() => Output3$.inboundSchema),
        z.lazy(() => Output4$.inboundSchema),
        z.lazy(() => Output5$.inboundSchema),
        z.lazy(() => Output6$.inboundSchema),
    ]);

    export type Outbound =
        | Output1$.Outbound
        | Output2$.Outbound
        | Output3$.Outbound
        | Output4$.Outbound
        | Output5$.Outbound
        | Output6$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Output> = z.union([
        z.lazy(() => Output1$.outboundSchema),
        z.lazy(() => Output2$.outboundSchema),
        z.lazy(() => Output3$.outboundSchema),
        z.lazy(() => Output4$.outboundSchema),
        z.lazy(() => Output5$.outboundSchema),
        z.lazy(() => Output6$.outboundSchema),
    ]);
}

/** @internal */
export namespace WorkflowInstanceHistoryStage$ {
    export const inboundSchema: z.ZodType<WorkflowInstanceHistoryStage, z.ZodTypeDef, unknown> =
        z.object({
            name: z.string(),
            input: z.union([
                z.lazy(() => Input1$.inboundSchema),
                z.lazy(() => Input2$.inboundSchema),
                z.lazy(() => Input3$.inboundSchema),
                z.lazy(() => Four$.inboundSchema),
                z.lazy(() => Five$.inboundSchema),
                z.lazy(() => Six$.inboundSchema),
                z.lazy(() => Seven$.inboundSchema),
                z.lazy(() => Eight$.inboundSchema),
                z.lazy(() => Nine$.inboundSchema),
                z.lazy(() => Ten$.inboundSchema),
            ]),
            output: z
                .union([
                    z.lazy(() => Output1$.inboundSchema),
                    z.lazy(() => Output2$.inboundSchema),
                    z.lazy(() => Output3$.inboundSchema),
                    z.lazy(() => Output4$.inboundSchema),
                    z.lazy(() => Output5$.inboundSchema),
                    z.lazy(() => Output6$.inboundSchema),
                ])
                .optional(),
            error: z.string().optional(),
            terminated: z.boolean(),
            startedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            terminatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            astFailure: z.string().optional(),
            attempt: z.number().int(),
            nextExecution: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        });

    export type Outbound = {
        name: string;
        input:
            | Input1$.Outbound
            | Input2$.Outbound
            | Input3$.Outbound
            | Four$.Outbound
            | Five$.Outbound
            | Six$.Outbound
            | Seven$.Outbound
            | Eight$.Outbound
            | Nine$.Outbound
            | Ten$.Outbound;
        output?:
            | Output1$.Outbound
            | Output2$.Outbound
            | Output3$.Outbound
            | Output4$.Outbound
            | Output5$.Outbound
            | Output6$.Outbound
            | undefined;
        error?: string | undefined;
        terminated: boolean;
        startedAt: string;
        terminatedAt?: string | undefined;
        astFailure?: string | undefined;
        attempt: number;
        nextExecution?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowInstanceHistoryStage> =
        z.object({
            name: z.string(),
            input: z.union([
                z.lazy(() => Input1$.outboundSchema),
                z.lazy(() => Input2$.outboundSchema),
                z.lazy(() => Input3$.outboundSchema),
                z.lazy(() => Four$.outboundSchema),
                z.lazy(() => Five$.outboundSchema),
                z.lazy(() => Six$.outboundSchema),
                z.lazy(() => Seven$.outboundSchema),
                z.lazy(() => Eight$.outboundSchema),
                z.lazy(() => Nine$.outboundSchema),
                z.lazy(() => Ten$.outboundSchema),
            ]),
            output: z
                .union([
                    z.lazy(() => Output1$.outboundSchema),
                    z.lazy(() => Output2$.outboundSchema),
                    z.lazy(() => Output3$.outboundSchema),
                    z.lazy(() => Output4$.outboundSchema),
                    z.lazy(() => Output5$.outboundSchema),
                    z.lazy(() => Output6$.outboundSchema),
                ])
                .optional(),
            error: z.string().optional(),
            terminated: z.boolean(),
            startedAt: z.date().transform((v) => v.toISOString()),
            terminatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            astFailure: z.string().optional(),
            attempt: z.number().int(),
            nextExecution: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        });
}
