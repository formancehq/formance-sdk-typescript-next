/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LedgerPosting, LedgerPosting$ } from "./ledgerposting.js";
import * as z from "zod";

export type LedgerCreateTransactionWithPostings = {
    timestamp?: Date | undefined;
    reference?: string | undefined;
    metadata: { [k: string]: string };
    postings: Array<LedgerPosting>;
};

/** @internal */
export namespace LedgerCreateTransactionWithPostings$ {
    export const inboundSchema: z.ZodType<
        LedgerCreateTransactionWithPostings,
        z.ZodTypeDef,
        unknown
    > = z.object({
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        reference: z.string().optional(),
        metadata: z.record(z.string()),
        postings: z.array(LedgerPosting$.inboundSchema),
    });

    export type Outbound = {
        timestamp?: string | undefined;
        reference?: string | undefined;
        metadata: { [k: string]: string };
        postings: Array<LedgerPosting$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        LedgerCreateTransactionWithPostings
    > = z.object({
        timestamp: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        reference: z.string().optional(),
        metadata: z.record(z.string()),
        postings: z.array(LedgerPosting$.outboundSchema),
    });
}
