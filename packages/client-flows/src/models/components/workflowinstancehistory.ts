/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { StageDelay, StageDelay$ } from "./stagedelay.js";
import { StageSend, StageSend$ } from "./stagesend.js";
import { StageWaitEvent, StageWaitEvent$ } from "./stagewaitevent.js";
import * as z from "zod";

export type Input = StageWaitEvent | StageDelay | StageSend;

export type WorkflowInstanceHistory = {
    name: string;
    input: StageWaitEvent | StageDelay | StageSend;
    error?: string | undefined;
    terminated: boolean;
    startedAt: Date;
    terminatedAt?: Date | undefined;
};

/** @internal */
export namespace Input$ {
    export const inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown> = z.union([
        StageWaitEvent$.inboundSchema,
        StageDelay$.inboundSchema,
        StageSend$.inboundSchema,
    ]);

    export type Outbound = StageWaitEvent$.Outbound | StageDelay$.Outbound | StageSend$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Input> = z.union([
        StageWaitEvent$.outboundSchema,
        StageDelay$.outboundSchema,
        StageSend$.outboundSchema,
    ]);
}

/** @internal */
export namespace WorkflowInstanceHistory$ {
    export const inboundSchema: z.ZodType<WorkflowInstanceHistory, z.ZodTypeDef, unknown> =
        z.object({
            name: z.string(),
            input: z.union([
                StageWaitEvent$.inboundSchema,
                StageDelay$.inboundSchema,
                StageSend$.inboundSchema,
            ]),
            error: z.string().optional(),
            terminated: z.boolean(),
            startedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            terminatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        });

    export type Outbound = {
        name: string;
        input: StageWaitEvent$.Outbound | StageDelay$.Outbound | StageSend$.Outbound;
        error?: string | undefined;
        terminated: boolean;
        startedAt: string;
        terminatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowInstanceHistory> =
        z.object({
            name: z.string(),
            input: z.union([
                StageWaitEvent$.outboundSchema,
                StageDelay$.outboundSchema,
                StageSend$.outboundSchema,
            ]),
            error: z.string().optional(),
            terminated: z.boolean(),
            startedAt: z.date().transform((v) => v.toISOString()),
            terminatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        });
}
