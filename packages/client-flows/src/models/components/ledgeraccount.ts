/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    LedgerVolume,
    LedgerVolume$inboundSchema,
    LedgerVolume$Outbound,
    LedgerVolume$outboundSchema,
} from "./ledgervolume.js";
import * as z from "zod";

export type LedgerAccount = {
    address: string;
    metadata: { [k: string]: string };
    volumes: { [k: string]: LedgerVolume };
    effectiveVolumes: { [k: string]: LedgerVolume };
};

/** @internal */
export const LedgerAccount$inboundSchema: z.ZodType<LedgerAccount, z.ZodTypeDef, unknown> =
    z.object({
        address: z.string(),
        metadata: z.record(z.string()),
        volumes: z.record(LedgerVolume$inboundSchema),
        effectiveVolumes: z.record(LedgerVolume$inboundSchema),
    });

/** @internal */
export type LedgerAccount$Outbound = {
    address: string;
    metadata: { [k: string]: string };
    volumes: { [k: string]: LedgerVolume$Outbound };
    effectiveVolumes: { [k: string]: LedgerVolume$Outbound };
};

/** @internal */
export const LedgerAccount$outboundSchema: z.ZodType<
    LedgerAccount$Outbound,
    z.ZodTypeDef,
    LedgerAccount
> = z.object({
    address: z.string(),
    metadata: z.record(z.string()),
    volumes: z.record(LedgerVolume$outboundSchema),
    effectiveVolumes: z.record(LedgerVolume$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LedgerAccount$ {
    /** @deprecated use `LedgerAccount$inboundSchema` instead. */
    export const inboundSchema = LedgerAccount$inboundSchema;
    /** @deprecated use `LedgerAccount$outboundSchema` instead. */
    export const outboundSchema = LedgerAccount$outboundSchema;
    /** @deprecated use `LedgerAccount$Outbound` instead. */
    export type Outbound = LedgerAccount$Outbound;
}
