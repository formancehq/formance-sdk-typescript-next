/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LedgerVolume, LedgerVolume$ } from "./ledgervolume.js";
import * as z from "zod";

export type LedgerAccount = {
    address: string;
    metadata: { [k: string]: string };
    volumes: { [k: string]: LedgerVolume };
    effectiveVolumes: { [k: string]: LedgerVolume };
};

/** @internal */
export namespace LedgerAccount$ {
    export const inboundSchema: z.ZodType<LedgerAccount, z.ZodTypeDef, unknown> = z.object({
        address: z.string(),
        metadata: z.record(z.string()),
        volumes: z.record(LedgerVolume$.inboundSchema),
        effectiveVolumes: z.record(LedgerVolume$.inboundSchema),
    });

    export type Outbound = {
        address: string;
        metadata: { [k: string]: string };
        volumes: { [k: string]: LedgerVolume$.Outbound };
        effectiveVolumes: { [k: string]: LedgerVolume$.Outbound };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgerAccount> = z.object({
        address: z.string(),
        metadata: z.record(z.string()),
        volumes: z.record(LedgerVolume$.outboundSchema),
        effectiveVolumes: z.record(LedgerVolume$.outboundSchema),
    });
}
