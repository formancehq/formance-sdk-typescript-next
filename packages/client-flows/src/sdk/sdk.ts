/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as m$ from "../lib/matchers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { unwrap as unwrap$ } from "../types/fp.js";
import { Instances } from "./instances.js";
import { Triggers } from "./triggers.js";
import { Workflows } from "./workflows.js";

export class FlowsClient extends ClientSDK {
    private _instances?: Instances;
    get instances(): Instances {
        return (this._instances ??= new Instances(this.options$));
    }

    private _triggers?: Triggers;
    get triggers(): Triggers {
        return (this._triggers ??= new Triggers(this.options$));
    }

    private _workflows?: Workflows;
    get workflows(): Workflows {
        return (this._workflows ??= new Workflows(this.options$));
    }

    async info(options?: RequestOptions): Promise<components.ServerInfo> {
        const path$ = pathToFunc("/api/orchestration/v2/_info")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "_info",
            oAuth2Scopes: ["flows:read"],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["default"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 500,
                        maxInterval: 60000,
                        exponent: 1.5,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<components.ServerInfo, SDKError | SDKValidationError>(
            m$.json(200, components.ServerInfo$inboundSchema),
            m$.fail("default")
        )(response);

        return unwrap$(result$);
    }
}
