/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { triggersCreate } from "../funcs/triggersCreate.js";
import { triggersDelete } from "../funcs/triggersDelete.js";
import { triggersGet } from "../funcs/triggersGet.js";
import { triggersList } from "../funcs/triggersList.js";
import { triggersListOccurences } from "../funcs/triggersListOccurences.js";
import { triggersTest } from "../funcs/triggersTest.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Triggers extends ClientSDK {
    async list(
        name?: string | undefined,
        cursor?: string | undefined,
        pageSize?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.TriggersListResponse>> {
        return unwrapResultIterator(triggersList(this, name, cursor, pageSize, options));
    }

    async create(
        request: operations.TriggersCreateRequestBody,
        options?: RequestOptions
    ): Promise<operations.TriggersCreateResponseBody> {
        return unwrapAsync(triggersCreate(this, request, options));
    }

    async get(id: string, options?: RequestOptions): Promise<operations.TriggersGetResponseBody> {
        return unwrapAsync(triggersGet(this, id, options));
    }

    async delete(id: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(triggersDelete(this, id, options));
    }

    async listOccurences(
        id: string,
        cursor?: string | undefined,
        pageSize?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.TriggersListOccurencesResponse>> {
        return unwrapResultIterator(triggersListOccurences(this, id, cursor, pageSize, options));
    }

    async test(
        id: string,
        requestBody: { [k: string]: any },
        options?: RequestOptions
    ): Promise<operations.TriggersTestResponseBody> {
        return unwrapAsync(triggersTest(this, id, requestBody, options));
    }
}
