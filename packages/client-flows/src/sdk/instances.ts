/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { instancesAbort } from "../funcs/instancesAbort.js";
import { instancesGet } from "../funcs/instancesGet.js";
import { instancesGetHistory } from "../funcs/instancesGetHistory.js";
import { instancesGetStageHistory } from "../funcs/instancesGetStageHistory.js";
import { instancesList } from "../funcs/instancesList.js";
import { instancesSend } from "../funcs/instancesSend.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Instances extends ClientSDK {
    async list(
        workflowId: string,
        running: boolean,
        cursor?: string | undefined,
        pageSize?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.InstancesListResponse>> {
        return unwrapResultIterator(
            instancesList(this, workflowId, running, cursor, pageSize, options)
        );
    }

    async get(id: string, options?: RequestOptions): Promise<operations.InstancesGetResponseBody> {
        return unwrapAsync(instancesGet(this, id, options));
    }

    async abort(id: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(instancesAbort(this, id, options));
    }

    async send(
        id: string,
        requestBody: operations.InstancesSendRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(instancesSend(this, id, requestBody, options));
    }

    async getHistory(
        id: string,
        options?: RequestOptions
    ): Promise<operations.InstancesGetHistoryResponseBody> {
        return unwrapAsync(instancesGetHistory(this, id, options));
    }

    async getStageHistory(
        id: string,
        stageIndex: number,
        options?: RequestOptions
    ): Promise<operations.InstancesGetStageHistoryResponseBody> {
        return unwrapAsync(instancesGetStageHistory(this, id, stageIndex, options));
    }
}
