/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import * as z from "zod";

export const AddMetadataTargetTransactionTargetType = {
    Transaction: "TRANSACTION",
} as const;
export type AddMetadataTargetTransactionTargetType = ClosedEnum<
    typeof AddMetadataTargetTransactionTargetType
>;

export type AddMetadataTargetTransaction = {
    targetType: AddMetadataTargetTransactionTargetType;
    targetId: number;
    metadata: { [k: string]: string };
};

/** @internal */
export namespace AddMetadataTargetTransactionTargetType$ {
    export const inboundSchema = z.nativeEnum(AddMetadataTargetTransactionTargetType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AddMetadataTargetTransaction$ {
    export const inboundSchema: z.ZodType<AddMetadataTargetTransaction, z.ZodTypeDef, unknown> =
        z.object({
            targetType: AddMetadataTargetTransactionTargetType$.inboundSchema,
            targetId: z.number().int(),
            metadata: z.record(z.string()),
        });

    export type Outbound = {
        targetType: string;
        targetId: number;
        metadata: { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddMetadataTargetTransaction> =
        z.object({
            targetType: AddMetadataTargetTransactionTargetType$.outboundSchema,
            targetId: z.number().int(),
            metadata: z.record(z.string()),
        });
}
