/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    Posting,
    Posting$inboundSchema,
    Posting$Outbound,
    Posting$outboundSchema,
} from "./posting.js";
import * as z from "zod";

export type Transaction = {
    timestamp: Date;
    postings: Array<Posting>;
    reference?: string | undefined;
    metadata: { [k: string]: string };
    id: string;
    reverted: boolean;
};

/** @internal */
export const Transaction$inboundSchema: z.ZodType<Transaction, z.ZodTypeDef, unknown> = z.object({
    timestamp: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    postings: z.array(Posting$inboundSchema),
    reference: z.string().optional(),
    metadata: z.record(z.string()),
    id: z.string(),
    reverted: z.boolean(),
});

/** @internal */
export type Transaction$Outbound = {
    timestamp: string;
    postings: Array<Posting$Outbound>;
    reference?: string | undefined;
    metadata: { [k: string]: string };
    id: string;
    reverted: boolean;
};

/** @internal */
export const Transaction$outboundSchema: z.ZodType<
    Transaction$Outbound,
    z.ZodTypeDef,
    Transaction
> = z.object({
    timestamp: z.date().transform((v) => v.toISOString()),
    postings: z.array(Posting$outboundSchema),
    reference: z.string().optional(),
    metadata: z.record(z.string()),
    id: z.string(),
    reverted: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transaction$ {
    /** @deprecated use `Transaction$inboundSchema` instead. */
    export const inboundSchema = Transaction$inboundSchema;
    /** @deprecated use `Transaction$outboundSchema` instead. */
    export const outboundSchema = Transaction$outboundSchema;
    /** @deprecated use `Transaction$Outbound` instead. */
    export type Outbound = Transaction$Outbound;
}
