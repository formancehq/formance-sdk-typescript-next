/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Script = {
    plain: string;
    vars?: { [k: string]: any } | undefined;
};

export type CreateTransactionWithNumscript = {
    timestamp?: Date | undefined;
    reference?: string | undefined;
    metadata: { [k: string]: string };
    script: Script;
};

/** @internal */
export namespace Script$ {
    export const inboundSchema: z.ZodType<Script, z.ZodTypeDef, unknown> = z.object({
        plain: z.string(),
        vars: z.record(z.any()).optional(),
    });

    export type Outbound = {
        plain: string;
        vars?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Script> = z.object({
        plain: z.string(),
        vars: z.record(z.any()).optional(),
    });
}

/** @internal */
export namespace CreateTransactionWithNumscript$ {
    export const inboundSchema: z.ZodType<CreateTransactionWithNumscript, z.ZodTypeDef, unknown> =
        z.object({
            timestamp: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            reference: z.string().optional(),
            metadata: z.record(z.string()),
            script: z.lazy(() => Script$.inboundSchema),
        });

    export type Outbound = {
        timestamp?: string | undefined;
        reference?: string | undefined;
        metadata: { [k: string]: string };
        script: Script$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransactionWithNumscript> =
        z.object({
            timestamp: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            reference: z.string().optional(),
            metadata: z.record(z.string()),
            script: z.lazy(() => Script$.outboundSchema),
        });
}
