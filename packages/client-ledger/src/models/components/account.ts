/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Account = {
    address: string;
    type: string;
    metadata: { [k: string]: string };
};

/** @internal */
export namespace Account$ {
    export const inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> = z
        .object({
            address: z.string(),
            type: z.string(),
            metadata: z.record(z.string()),
        })
        .transform((v) => {
            return {
                address: v.address,
                type: v.type,
                metadata: v.metadata,
            };
        });

    export type Outbound = {
        address: string;
        type: string;
        metadata: { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Account> = z
        .object({
            address: z.string(),
            type: z.string(),
            metadata: z.record(z.string()),
        })
        .transform((v) => {
            return {
                address: v.address,
                type: v.type,
                metadata: v.metadata,
            };
        });
}
