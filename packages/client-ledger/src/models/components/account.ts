/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Volume, Volume$inboundSchema, Volume$Outbound, Volume$outboundSchema } from "./volume.js";
import * as z from "zod";

export type Account = {
    address: string;
    metadata: { [k: string]: string };
    volumes: { [k: string]: Volume };
    effectiveVolumes: { [k: string]: Volume };
};

/** @internal */
export const Account$inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> = z.object({
    address: z.string(),
    metadata: z.record(z.string()),
    volumes: z.record(Volume$inboundSchema),
    effectiveVolumes: z.record(Volume$inboundSchema),
});

/** @internal */
export type Account$Outbound = {
    address: string;
    metadata: { [k: string]: string };
    volumes: { [k: string]: Volume$Outbound };
    effectiveVolumes: { [k: string]: Volume$Outbound };
};

/** @internal */
export const Account$outboundSchema: z.ZodType<Account$Outbound, z.ZodTypeDef, Account> = z.object({
    address: z.string(),
    metadata: z.record(z.string()),
    volumes: z.record(Volume$outboundSchema),
    effectiveVolumes: z.record(Volume$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Account$ {
    /** @deprecated use `Account$inboundSchema` instead. */
    export const inboundSchema = Account$inboundSchema;
    /** @deprecated use `Account$outboundSchema` instead. */
    export const outboundSchema = Account$outboundSchema;
    /** @deprecated use `Account$Outbound` instead. */
    export type Outbound = Account$Outbound;
}
