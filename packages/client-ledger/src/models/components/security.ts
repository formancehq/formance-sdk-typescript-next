/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Security = {
    clientID?: string | undefined;
    clientSecret?: string | undefined;
    tokenURL?: "/api/auth/oauth/token" | undefined;
};

/** @internal */
export namespace Security$ {
    export const inboundSchema: z.ZodType<Security, z.ZodTypeDef, unknown> = z
        .object({
            ClientID: z.string().optional(),
            ClientSecret: z.string().optional(),
            TokenURL: z.literal("/api/auth/oauth/token").optional(),
        })
        .transform((v) => {
            return {
                ...(v.ClientID === undefined ? null : { clientID: v.ClientID }),
                ...(v.ClientSecret === undefined ? null : { clientSecret: v.ClientSecret }),
                ...(v.TokenURL === undefined ? null : { tokenURL: v.TokenURL }),
            };
        });

    export type Outbound = {
        ClientID?: string | undefined;
        ClientSecret?: string | undefined;
        TokenURL: "/api/auth/oauth/token";
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Security> = z
        .object({
            clientID: z.string().optional(),
            clientSecret: z.string().optional(),
            tokenURL: z.literal("/api/auth/oauth/token").default("/api/auth/oauth/token" as const),
        })
        .transform((v) => {
            return {
                ...(v.clientID === undefined ? null : { ClientID: v.clientID }),
                ...(v.clientSecret === undefined ? null : { ClientSecret: v.clientSecret }),
                TokenURL: v.tokenURL,
            };
        });
}
