/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const TargetType = {
    Account: "ACCOUNT",
} as const;
export type TargetType = ClosedEnum<typeof TargetType>;

export type AddMetadataTargetAccount = {
    targetType: TargetType;
    targetId: string;
    metadata: { [k: string]: string };
};

/** @internal */
export namespace TargetType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof TargetType> = z.nativeEnum(TargetType);
    export const outboundSchema: z.ZodNativeEnum<typeof TargetType> = inboundSchema;
}

/** @internal */
export namespace AddMetadataTargetAccount$ {
    export const inboundSchema: z.ZodType<AddMetadataTargetAccount, z.ZodTypeDef, unknown> =
        z.object({
            targetType: TargetType$.inboundSchema,
            targetId: z.string(),
            metadata: z.record(z.string()),
        });

    export type Outbound = {
        targetType: string;
        targetId: string;
        metadata: { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddMetadataTargetAccount> =
        z.object({
            targetType: TargetType$.outboundSchema,
            targetId: z.string(),
            metadata: z.record(z.string()),
        });
}
