/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LogEntryType, LogEntryType$ } from "./logentrytype.js";
import * as z from "zod";

export type LogEntry = {
    id: number;
    type: LogEntryType;
    data?: any | undefined;
    hash: string;
    date: Date;
};

/** @internal */
export namespace LogEntry$ {
    export const inboundSchema: z.ZodType<LogEntry, z.ZodTypeDef, unknown> = z.object({
        id: z.number().int(),
        type: LogEntryType$.inboundSchema,
        data: z.any().optional(),
        hash: z.string(),
        date: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    });

    export type Outbound = {
        id: number;
        type: string;
        data?: any | undefined;
        hash: string;
        date: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LogEntry> = z.object({
        id: z.number().int(),
        type: LogEntryType$.outboundSchema,
        data: z.any().optional(),
        hash: z.string(),
        date: z.date().transform((v) => v.toISOString()),
    });
}
