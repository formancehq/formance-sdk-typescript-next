/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    LogEntryType,
    LogEntryType$inboundSchema,
    LogEntryType$outboundSchema,
} from "./logentrytype.js";
import * as z from "zod";

export type LogEntry = {
    id: number;
    type: LogEntryType;
    data?: any | undefined;
    hash: string;
    date: Date;
};

/** @internal */
export const LogEntry$inboundSchema: z.ZodType<LogEntry, z.ZodTypeDef, unknown> = z.object({
    id: z.number().int(),
    type: LogEntryType$inboundSchema,
    data: z.any().optional(),
    hash: z.string(),
    date: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
});

/** @internal */
export type LogEntry$Outbound = {
    id: number;
    type: string;
    data?: any | undefined;
    hash: string;
    date: string;
};

/** @internal */
export const LogEntry$outboundSchema: z.ZodType<LogEntry$Outbound, z.ZodTypeDef, LogEntry> =
    z.object({
        id: z.number().int(),
        type: LogEntryType$outboundSchema,
        data: z.any().optional(),
        hash: z.string(),
        date: z.date().transform((v) => v.toISOString()),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogEntry$ {
    /** @deprecated use `LogEntry$inboundSchema` instead. */
    export const inboundSchema = LogEntry$inboundSchema;
    /** @deprecated use `LogEntry$outboundSchema` instead. */
    export const outboundSchema = LogEntry$outboundSchema;
    /** @deprecated use `LogEntry$Outbound` instead. */
    export type Outbound = LogEntry$Outbound;
}
