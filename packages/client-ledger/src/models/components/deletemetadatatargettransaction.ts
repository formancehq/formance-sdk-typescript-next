/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const DeleteMetadataTargetTransactionTargetType = {
    Transaction: "TRANSACTION",
} as const;
export type DeleteMetadataTargetTransactionTargetType = ClosedEnum<
    typeof DeleteMetadataTargetTransactionTargetType
>;

export type DeleteMetadataTargetTransaction = {
    targetId: number;
    targetType: DeleteMetadataTargetTransactionTargetType;
    key: string;
};

/** @internal */
export namespace DeleteMetadataTargetTransactionTargetType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof DeleteMetadataTargetTransactionTargetType> =
        z.nativeEnum(DeleteMetadataTargetTransactionTargetType);
    export const outboundSchema: z.ZodNativeEnum<typeof DeleteMetadataTargetTransactionTargetType> =
        inboundSchema;
}

/** @internal */
export namespace DeleteMetadataTargetTransaction$ {
    export const inboundSchema: z.ZodType<DeleteMetadataTargetTransaction, z.ZodTypeDef, unknown> =
        z.object({
            targetId: z.number().int(),
            targetType: DeleteMetadataTargetTransactionTargetType$.inboundSchema,
            key: z.string(),
        });

    export type Outbound = {
        targetId: number;
        targetType: string;
        key: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteMetadataTargetTransaction
    > = z.object({
        targetId: z.number().int(),
        targetType: DeleteMetadataTargetTransactionTargetType$.outboundSchema,
        key: z.string(),
    });
}
