/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Ledger = {
    name: string;
    addedAt: Date;
    bucket: string;
};

/** @internal */
export namespace Ledger$ {
    export const inboundSchema: z.ZodType<Ledger, z.ZodTypeDef, unknown> = z.object({
        name: z.string(),
        addedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        bucket: z.string(),
    });

    export type Outbound = {
        name: string;
        addedAt: string;
        bucket: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Ledger> = z.object({
        name: z.string(),
        addedAt: z.date().transform((v) => v.toISOString()),
        bucket: z.string(),
    });
}
