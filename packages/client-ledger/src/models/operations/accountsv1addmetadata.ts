/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type AccountsV1AddMetadataRequestBody = {
    metadata: { [k: string]: any };
};

export type AccountsV1AddMetadataRequest = {
    ledger: string;
    address: string;
    requestBody: AccountsV1AddMetadataRequestBody;
};

/** @internal */
export namespace AccountsV1AddMetadataRequestBody$ {
    export const inboundSchema: z.ZodType<AccountsV1AddMetadataRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            metadata: z.record(z.any()),
        });

    export type Outbound = {
        metadata: { [k: string]: any };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AccountsV1AddMetadataRequestBody
    > = z.object({
        metadata: z.record(z.any()),
    });
}

/** @internal */
export namespace AccountsV1AddMetadataRequest$ {
    export const inboundSchema: z.ZodType<AccountsV1AddMetadataRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            address: z.string(),
            RequestBody: z.lazy(() => AccountsV1AddMetadataRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        ledger: string;
        address: string;
        RequestBody: AccountsV1AddMetadataRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsV1AddMetadataRequest> = z
        .object({
            ledger: z.string(),
            address: z.string(),
            requestBody: z.lazy(() => AccountsV1AddMetadataRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}
