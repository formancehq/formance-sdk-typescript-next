/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AccountsListRequest = {
    ledger: string;
    cursor?: string | undefined;
    pageSize?: number | undefined;
    pit?: Date | undefined;
    expand?: string | undefined;
};

export type AccountsListCursor = {
    next?: string | undefined;
    data: Array<components.Account>;
};

/**
 * The request has succeeded.
 */
export type AccountsListResponseBody = {
    cursor: AccountsListCursor;
};

export type AccountsListResponse = {
    result: AccountsListResponseBody;
};

/** @internal */
export namespace AccountsListRequest$ {
    export const inboundSchema: z.ZodType<AccountsListRequest, z.ZodTypeDef, unknown> = z.object({
        ledger: z.string(),
        cursor: z.string().optional(),
        pageSize: z.number().int().optional(),
        pit: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        expand: z.string().optional(),
    });

    export type Outbound = {
        ledger: string;
        cursor?: string | undefined;
        pageSize?: number | undefined;
        pit?: string | undefined;
        expand?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsListRequest> = z.object({
        ledger: z.string(),
        cursor: z.string().optional(),
        pageSize: z.number().int().optional(),
        pit: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        expand: z.string().optional(),
    });
}

/** @internal */
export namespace AccountsListCursor$ {
    export const inboundSchema: z.ZodType<AccountsListCursor, z.ZodTypeDef, unknown> = z.object({
        next: z.string().optional(),
        data: z.array(components.Account$.inboundSchema),
    });

    export type Outbound = {
        next?: string | undefined;
        data: Array<components.Account$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsListCursor> = z.object({
        next: z.string().optional(),
        data: z.array(components.Account$.outboundSchema),
    });
}

/** @internal */
export namespace AccountsListResponseBody$ {
    export const inboundSchema: z.ZodType<AccountsListResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => AccountsListCursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: AccountsListCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsListResponseBody> =
        z.object({
            cursor: z.lazy(() => AccountsListCursor$.outboundSchema),
        });
}

/** @internal */
export namespace AccountsListResponse$ {
    export const inboundSchema: z.ZodType<AccountsListResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => AccountsListResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: AccountsListResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsListResponse> = z
        .object({
            result: z.lazy(() => AccountsListResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
