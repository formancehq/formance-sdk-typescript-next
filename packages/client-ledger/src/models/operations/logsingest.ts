/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type LogsIngestRequest = {
    ledger: string;
    requestBody: string;
};

/** @internal */
export const LogsIngestRequest$inboundSchema: z.ZodType<LogsIngestRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            ledger: z.string(),
            RequestBody: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

/** @internal */
export type LogsIngestRequest$Outbound = {
    ledger: string;
    RequestBody: string;
};

/** @internal */
export const LogsIngestRequest$outboundSchema: z.ZodType<
    LogsIngestRequest$Outbound,
    z.ZodTypeDef,
    LogsIngestRequest
> = z
    .object({
        ledger: z.string(),
        requestBody: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogsIngestRequest$ {
    /** @deprecated use `LogsIngestRequest$inboundSchema` instead. */
    export const inboundSchema = LogsIngestRequest$inboundSchema;
    /** @deprecated use `LogsIngestRequest$outboundSchema` instead. */
    export const outboundSchema = LogsIngestRequest$outboundSchema;
    /** @deprecated use `LogsIngestRequest$Outbound` instead. */
    export type Outbound = LogsIngestRequest$Outbound;
}
