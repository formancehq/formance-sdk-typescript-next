/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type TransactionsCountRequest = {
    ledger: string;
    pit?: Date | undefined;
    query?: { [k: string]: any } | undefined;
};

export type TransactionsCountResponse = {
    headers: { [k: string]: Array<string> };
};

/** @internal */
export const TransactionsCountRequest$inboundSchema: z.ZodType<
    TransactionsCountRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    ledger: z.string(),
    pit: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v))
        .optional(),
    query: z.record(z.any()).optional(),
});

/** @internal */
export type TransactionsCountRequest$Outbound = {
    ledger: string;
    pit?: string | undefined;
    query?: { [k: string]: any } | undefined;
};

/** @internal */
export const TransactionsCountRequest$outboundSchema: z.ZodType<
    TransactionsCountRequest$Outbound,
    z.ZodTypeDef,
    TransactionsCountRequest
> = z.object({
    ledger: z.string(),
    pit: z
        .date()
        .transform((v) => v.toISOString())
        .optional(),
    query: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCountRequest$ {
    /** @deprecated use `TransactionsCountRequest$inboundSchema` instead. */
    export const inboundSchema = TransactionsCountRequest$inboundSchema;
    /** @deprecated use `TransactionsCountRequest$outboundSchema` instead. */
    export const outboundSchema = TransactionsCountRequest$outboundSchema;
    /** @deprecated use `TransactionsCountRequest$Outbound` instead. */
    export type Outbound = TransactionsCountRequest$Outbound;
}

/** @internal */
export const TransactionsCountResponse$inboundSchema: z.ZodType<
    TransactionsCountResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Headers: z.record(z.array(z.string())),
    })
    .transform((v) => {
        return remap$(v, {
            Headers: "headers",
        });
    });

/** @internal */
export type TransactionsCountResponse$Outbound = {
    Headers: { [k: string]: Array<string> };
};

/** @internal */
export const TransactionsCountResponse$outboundSchema: z.ZodType<
    TransactionsCountResponse$Outbound,
    z.ZodTypeDef,
    TransactionsCountResponse
> = z
    .object({
        headers: z.record(z.array(z.string())),
    })
    .transform((v) => {
        return remap$(v, {
            headers: "Headers",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsCountResponse$ {
    /** @deprecated use `TransactionsCountResponse$inboundSchema` instead. */
    export const inboundSchema = TransactionsCountResponse$inboundSchema;
    /** @deprecated use `TransactionsCountResponse$outboundSchema` instead. */
    export const outboundSchema = TransactionsCountResponse$outboundSchema;
    /** @deprecated use `TransactionsCountResponse$Outbound` instead. */
    export type Outbound = TransactionsCountResponse$Outbound;
}
