/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type BalancesV1AggregateRequest = {
    ledger: string;
    address?: string | undefined;
    useInsertionData?: boolean | undefined;
};

/**
 * The request has succeeded.
 */
export type BalancesV1AggregateResponseBody = {
    data: { [k: string]: number };
};

/** @internal */
export namespace BalancesV1AggregateRequest$ {
    export const inboundSchema: z.ZodType<BalancesV1AggregateRequest, z.ZodTypeDef, unknown> =
        z.object({
            ledger: z.string(),
            address: z.string().optional(),
            useInsertionData: z.boolean().optional(),
        });

    export type Outbound = {
        ledger: string;
        address?: string | undefined;
        useInsertionData?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesV1AggregateRequest> =
        z.object({
            ledger: z.string(),
            address: z.string().optional(),
            useInsertionData: z.boolean().optional(),
        });
}

/** @internal */
export namespace BalancesV1AggregateResponseBody$ {
    export const inboundSchema: z.ZodType<BalancesV1AggregateResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: z.record(z.number().int()),
        });

    export type Outbound = {
        data: { [k: string]: number };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        BalancesV1AggregateResponseBody
    > = z.object({
        data: z.record(z.number().int()),
    });
}
