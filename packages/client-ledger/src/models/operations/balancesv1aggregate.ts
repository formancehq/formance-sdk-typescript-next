/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type BalancesV1AggregateRequest = {
    ledger: string;
    address?: string | undefined;
    useInsertionData?: boolean | undefined;
};

/**
 * The request has succeeded.
 */
export type BalancesV1AggregateResponseBody = {
    data: { [k: string]: number };
};

/** @internal */
export namespace BalancesV1AggregateRequest$ {
    export const inboundSchema: z.ZodType<BalancesV1AggregateRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            address: z.string().optional(),
            useInsertionData: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.useInsertionData === undefined
                    ? null
                    : { useInsertionData: v.useInsertionData }),
            };
        });

    export type Outbound = {
        ledger: string;
        address?: string | undefined;
        useInsertionData?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesV1AggregateRequest> = z
        .object({
            ledger: z.string(),
            address: z.string().optional(),
            useInsertionData: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.useInsertionData === undefined
                    ? null
                    : { useInsertionData: v.useInsertionData }),
            };
        });
}

/** @internal */
export namespace BalancesV1AggregateResponseBody$ {
    export const inboundSchema: z.ZodType<BalancesV1AggregateResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                data: z.record(z.number().int()),
            })
            .transform((v) => {
                return {
                    data: v.data,
                };
            });

    export type Outbound = {
        data: { [k: string]: number };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        BalancesV1AggregateResponseBody
    > = z
        .object({
            data: z.record(z.number().int()),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
