/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type LedgersBulkRequest = {
    ledger: string;
    requestBody: Array<components.BulkAction>;
};

/**
 * The request has succeeded.
 */
export type LedgersBulkResponseBody = {
    data: Array<components.BulkResponse>;
};

/** @internal */
export namespace LedgersBulkRequest$ {
    export const inboundSchema: z.ZodType<LedgersBulkRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            RequestBody: z.array(components.BulkAction$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        ledger: string;
        RequestBody: Array<components.BulkAction$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersBulkRequest> = z
        .object({
            ledger: z.string(),
            requestBody: z.array(components.BulkAction$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace LedgersBulkResponseBody$ {
    export const inboundSchema: z.ZodType<LedgersBulkResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: z.array(components.BulkResponse$.inboundSchema),
        });

    export type Outbound = {
        data: Array<components.BulkResponse$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersBulkResponseBody> =
        z.object({
            data: z.array(components.BulkResponse$.outboundSchema),
        });
}
