/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type AccountsGetRequest = {
    ledger: string;
    address: string;
    pit?: Date | undefined;
    expand?: string | undefined;
};

/**
 * The request has succeeded.
 */
export type AccountsGetResponseBody = {
    data: components.Account;
};

/** @internal */
export namespace AccountsGetRequest$ {
    export const inboundSchema: z.ZodType<AccountsGetRequest, z.ZodTypeDef, unknown> = z.object({
        ledger: z.string(),
        address: z.string(),
        pit: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        expand: z.string().optional(),
    });

    export type Outbound = {
        ledger: string;
        address: string;
        pit?: string | undefined;
        expand?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsGetRequest> = z.object({
        ledger: z.string(),
        address: z.string(),
        pit: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        expand: z.string().optional(),
    });
}

/** @internal */
export namespace AccountsGetResponseBody$ {
    export const inboundSchema: z.ZodType<AccountsGetResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: components.Account$.inboundSchema,
        });

    export type Outbound = {
        data: components.Account$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsGetResponseBody> =
        z.object({
            data: components.Account$.outboundSchema,
        });
}
