/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type LedgersListLogsRequest = {
    ledger: string;
    cursor?: string | undefined;
    pageSize?: number | undefined;
};

export type LedgersListLogsCursor = {
    next?: string | undefined;
    data: Array<components.LogEntry>;
};

/**
 * The request has succeeded.
 */
export type LedgersListLogsResponseBody = {
    cursor: LedgersListLogsCursor;
};

export type LedgersListLogsResponse = {
    result: LedgersListLogsResponseBody;
};

/** @internal */
export namespace LedgersListLogsRequest$ {
    export const inboundSchema: z.ZodType<LedgersListLogsRequest, z.ZodTypeDef, unknown> = z.object(
        {
            ledger: z.string(),
            cursor: z.string().optional(),
            pageSize: z.number().int().optional(),
        }
    );

    export type Outbound = {
        ledger: string;
        cursor?: string | undefined;
        pageSize?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersListLogsRequest> =
        z.object({
            ledger: z.string(),
            cursor: z.string().optional(),
            pageSize: z.number().int().optional(),
        });
}

/** @internal */
export namespace LedgersListLogsCursor$ {
    export const inboundSchema: z.ZodType<LedgersListLogsCursor, z.ZodTypeDef, unknown> = z.object({
        next: z.string().optional(),
        data: z.array(components.LogEntry$.inboundSchema),
    });

    export type Outbound = {
        next?: string | undefined;
        data: Array<components.LogEntry$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersListLogsCursor> =
        z.object({
            next: z.string().optional(),
            data: z.array(components.LogEntry$.outboundSchema),
        });
}

/** @internal */
export namespace LedgersListLogsResponseBody$ {
    export const inboundSchema: z.ZodType<LedgersListLogsResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => LedgersListLogsCursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: LedgersListLogsCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersListLogsResponseBody> =
        z.object({
            cursor: z.lazy(() => LedgersListLogsCursor$.outboundSchema),
        });
}

/** @internal */
export namespace LedgersListLogsResponse$ {
    export const inboundSchema: z.ZodType<LedgersListLogsResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => LedgersListLogsResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: LedgersListLogsResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersListLogsResponse> = z
        .object({
            result: z.lazy(() => LedgersListLogsResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
