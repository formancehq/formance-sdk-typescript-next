/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type BalancesAggregateRequest = {
    ledger: string;
    pit?: Date | undefined;
    useInsertionDate?: boolean | undefined;
    query: { [k: string]: any };
};

/**
 * The request has succeeded.
 */
export type BalancesAggregateResponseBody = {
    data: { [k: string]: any };
};

/** @internal */
export namespace BalancesAggregateRequest$ {
    export const inboundSchema: z.ZodType<BalancesAggregateRequest, z.ZodTypeDef, unknown> =
        z.object({
            ledger: z.string(),
            pit: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            useInsertionDate: z.boolean().optional(),
            query: z.record(z.any()),
        });

    export type Outbound = {
        ledger: string;
        pit?: string | undefined;
        useInsertionDate?: boolean | undefined;
        query: { [k: string]: any };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesAggregateRequest> =
        z.object({
            ledger: z.string(),
            pit: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            useInsertionDate: z.boolean().optional(),
            query: z.record(z.any()),
        });
}

/** @internal */
export namespace BalancesAggregateResponseBody$ {
    export const inboundSchema: z.ZodType<BalancesAggregateResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: z.record(z.any()),
        });

    export type Outbound = {
        data: { [k: string]: any };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesAggregateResponseBody> =
        z.object({
            data: z.record(z.any()),
        });
}
