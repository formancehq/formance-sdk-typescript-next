/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type LedgersStatsRequest = {
    ledger: string;
};

export type Data = {
    account: number;
    transactions: number;
};

/**
 * The request has succeeded.
 */
export type LedgersStatsResponseBody = {
    data: Data;
};

/** @internal */
export namespace LedgersStatsRequest$ {
    export const inboundSchema: z.ZodType<LedgersStatsRequest, z.ZodTypeDef, unknown> = z.object({
        ledger: z.string(),
    });

    export type Outbound = {
        ledger: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersStatsRequest> = z.object({
        ledger: z.string(),
    });
}

/** @internal */
export namespace Data$ {
    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z.object({
        account: z.number().int(),
        transactions: z.number().int(),
    });

    export type Outbound = {
        account: number;
        transactions: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z.object({
        account: z.number().int(),
        transactions: z.number().int(),
    });
}

/** @internal */
export namespace LedgersStatsResponseBody$ {
    export const inboundSchema: z.ZodType<LedgersStatsResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: z.lazy(() => Data$.inboundSchema),
        });

    export type Outbound = {
        data: Data$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersStatsResponseBody> =
        z.object({
            data: z.lazy(() => Data$.outboundSchema),
        });
}
