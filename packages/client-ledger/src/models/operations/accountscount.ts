/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type AccountsCountRequest = {
    ledger: string;
    address: string;
    pit?: Date | undefined;
    query: { [k: string]: any };
};

export type AccountsCountResponse = {
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace AccountsCountRequest$ {
    export const inboundSchema: z.ZodType<AccountsCountRequest, z.ZodTypeDef, unknown> = z.object({
        ledger: z.string(),
        address: z.string(),
        pit: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        query: z.record(z.any()),
    });

    export type Outbound = {
        ledger: string;
        address: string;
        pit?: string | undefined;
        query: { [k: string]: any };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsCountRequest> = z.object(
        {
            ledger: z.string(),
            address: z.string(),
            pit: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            query: z.record(z.any()),
        }
    );
}

/** @internal */
export namespace AccountsCountResponse$ {
    export const inboundSchema: z.ZodType<AccountsCountResponse, z.ZodTypeDef, unknown> = z
        .object({
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                Headers: "headers",
            });
        });

    export type Outbound = {
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsCountResponse> = z
        .object({
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                headers: "Headers",
            });
        });
}
