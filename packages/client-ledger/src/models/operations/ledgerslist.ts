/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type LedgersListRequest = {
    cursor?: string | undefined;
    pageSize?: number | undefined;
};

export type Cursor = {
    next?: string | undefined;
    data: Array<components.Ledger>;
};

/**
 * The request has succeeded.
 */
export type LedgersListResponseBody = {
    cursor: Cursor;
};

export type LedgersListResponse = {
    result: LedgersListResponseBody;
};

/** @internal */
export namespace LedgersListRequest$ {
    export const inboundSchema: z.ZodType<LedgersListRequest, z.ZodTypeDef, unknown> = z.object({
        cursor: z.string().optional(),
        pageSize: z.number().int().optional(),
    });

    export type Outbound = {
        cursor?: string | undefined;
        pageSize?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersListRequest> = z.object({
        cursor: z.string().optional(),
        pageSize: z.number().int().optional(),
    });
}

/** @internal */
export namespace Cursor$ {
    export const inboundSchema: z.ZodType<Cursor, z.ZodTypeDef, unknown> = z.object({
        next: z.string().optional(),
        data: z.array(components.Ledger$.inboundSchema),
    });

    export type Outbound = {
        next?: string | undefined;
        data: Array<components.Ledger$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Cursor> = z.object({
        next: z.string().optional(),
        data: z.array(components.Ledger$.outboundSchema),
    });
}

/** @internal */
export namespace LedgersListResponseBody$ {
    export const inboundSchema: z.ZodType<LedgersListResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => Cursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: Cursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersListResponseBody> =
        z.object({
            cursor: z.lazy(() => Cursor$.outboundSchema),
        });
}

/** @internal */
export namespace LedgersListResponse$ {
    export const inboundSchema: z.ZodType<LedgersListResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => LedgersListResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: LedgersListResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersListResponse> = z
        .object({
            result: z.lazy(() => LedgersListResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
