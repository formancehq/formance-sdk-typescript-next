/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type LedgersAddMetadataRequest = {
    ledger: string;
    requestBody: { [k: string]: string };
};

/** @internal */
export namespace LedgersAddMetadataRequest$ {
    export const inboundSchema: z.ZodType<LedgersAddMetadataRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            RequestBody: z.record(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        ledger: string;
        RequestBody: { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersAddMetadataRequest> = z
        .object({
            ledger: z.string(),
            requestBody: z.record(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}
