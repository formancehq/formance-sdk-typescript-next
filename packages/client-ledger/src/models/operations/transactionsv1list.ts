/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type TransactionsV1ListRequest = {
    ledger: string;
    pageSize?: number | undefined;
    cursor?: string | undefined;
    reference?: string | undefined;
    account?: string | undefined;
    source?: string | undefined;
    destination?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    metadata?: { [k: string]: any } | undefined;
};

export type TransactionsV1ListCursor = {
    next?: string | undefined;
    data: Array<components.Transaction>;
};

/**
 * The request has succeeded.
 */
export type TransactionsV1ListResponseBody = {
    cursor: TransactionsV1ListCursor;
};

export type TransactionsV1ListResponse = {
    result: TransactionsV1ListResponseBody;
};

/** @internal */
export namespace TransactionsV1ListRequest$ {
    export const inboundSchema: z.ZodType<TransactionsV1ListRequest, z.ZodTypeDef, unknown> =
        z.object({
            ledger: z.string(),
            pageSize: z.number().int().optional(),
            cursor: z.string().optional(),
            reference: z.string().optional(),
            account: z.string().optional(),
            source: z.string().optional(),
            destination: z.string().optional(),
            startTime: z.string().optional(),
            endTime: z.string().optional(),
            metadata: z.record(z.any()).optional(),
        });

    export type Outbound = {
        ledger: string;
        pageSize?: number | undefined;
        cursor?: string | undefined;
        reference?: string | undefined;
        account?: string | undefined;
        source?: string | undefined;
        destination?: string | undefined;
        startTime?: string | undefined;
        endTime?: string | undefined;
        metadata?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsV1ListRequest> =
        z.object({
            ledger: z.string(),
            pageSize: z.number().int().optional(),
            cursor: z.string().optional(),
            reference: z.string().optional(),
            account: z.string().optional(),
            source: z.string().optional(),
            destination: z.string().optional(),
            startTime: z.string().optional(),
            endTime: z.string().optional(),
            metadata: z.record(z.any()).optional(),
        });
}

/** @internal */
export namespace TransactionsV1ListCursor$ {
    export const inboundSchema: z.ZodType<TransactionsV1ListCursor, z.ZodTypeDef, unknown> =
        z.object({
            next: z.string().optional(),
            data: z.array(components.Transaction$.inboundSchema),
        });

    export type Outbound = {
        next?: string | undefined;
        data: Array<components.Transaction$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsV1ListCursor> =
        z.object({
            next: z.string().optional(),
            data: z.array(components.Transaction$.outboundSchema),
        });
}

/** @internal */
export namespace TransactionsV1ListResponseBody$ {
    export const inboundSchema: z.ZodType<TransactionsV1ListResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => TransactionsV1ListCursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: TransactionsV1ListCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsV1ListResponseBody> =
        z.object({
            cursor: z.lazy(() => TransactionsV1ListCursor$.outboundSchema),
        });
}

/** @internal */
export namespace TransactionsV1ListResponse$ {
    export const inboundSchema: z.ZodType<TransactionsV1ListResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => TransactionsV1ListResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: TransactionsV1ListResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsV1ListResponse> = z
        .object({
            result: z.lazy(() => TransactionsV1ListResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
