/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type BalancesV1GetRequest = {
    ledger: string;
    pageSize?: string | undefined;
    cursor?: string | undefined;
    address?: string | undefined;
    after?: string | undefined;
};

export type BalancesV1GetCursor = {
    next?: string | undefined;
    data: Array<Array<{ [k: string]: { [k: string]: number } }>>;
};

/**
 * The request has succeeded.
 */
export type BalancesV1GetResponseBody = {
    cursor: BalancesV1GetCursor;
};

export type BalancesV1GetResponse = {
    result: BalancesV1GetResponseBody;
};

/** @internal */
export namespace BalancesV1GetRequest$ {
    export const inboundSchema: z.ZodType<BalancesV1GetRequest, z.ZodTypeDef, unknown> = z.object({
        ledger: z.string(),
        pageSize: z.string().optional(),
        cursor: z.string().optional(),
        address: z.string().optional(),
        after: z.string().optional(),
    });

    export type Outbound = {
        ledger: string;
        pageSize?: string | undefined;
        cursor?: string | undefined;
        address?: string | undefined;
        after?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesV1GetRequest> = z.object(
        {
            ledger: z.string(),
            pageSize: z.string().optional(),
            cursor: z.string().optional(),
            address: z.string().optional(),
            after: z.string().optional(),
        }
    );
}

/** @internal */
export namespace BalancesV1GetCursor$ {
    export const inboundSchema: z.ZodType<BalancesV1GetCursor, z.ZodTypeDef, unknown> = z.object({
        next: z.string().optional(),
        data: z.array(z.array(z.record(z.record(z.number().int())))),
    });

    export type Outbound = {
        next?: string | undefined;
        data: Array<Array<{ [k: string]: { [k: string]: number } }>>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesV1GetCursor> = z.object({
        next: z.string().optional(),
        data: z.array(z.array(z.record(z.record(z.number().int())))),
    });
}

/** @internal */
export namespace BalancesV1GetResponseBody$ {
    export const inboundSchema: z.ZodType<BalancesV1GetResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => BalancesV1GetCursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: BalancesV1GetCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesV1GetResponseBody> =
        z.object({
            cursor: z.lazy(() => BalancesV1GetCursor$.outboundSchema),
        });
}

/** @internal */
export namespace BalancesV1GetResponse$ {
    export const inboundSchema: z.ZodType<BalancesV1GetResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => BalancesV1GetResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: BalancesV1GetResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesV1GetResponse> = z
        .object({
            result: z.lazy(() => BalancesV1GetResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
