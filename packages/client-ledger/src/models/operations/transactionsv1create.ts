/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type TransactionsV1CreateRequestBody =
    | components.CreateTransactionWithPostings
    | components.CreateTransactionWithNumscript;

export type TransactionsV1CreateRequest = {
    ledger: string;
    requestBody:
        | components.CreateTransactionWithPostings
        | components.CreateTransactionWithNumscript;
};

/**
 * The request has succeeded.
 */
export type TransactionsV1CreateResponseBody = {
    data: Array<components.Transaction>;
};

/** @internal */
export namespace TransactionsV1CreateRequestBody$ {
    export const inboundSchema: z.ZodType<TransactionsV1CreateRequestBody, z.ZodTypeDef, unknown> =
        z.union([
            components.CreateTransactionWithPostings$.inboundSchema,
            components.CreateTransactionWithNumscript$.inboundSchema,
        ]);

    export type Outbound =
        | components.CreateTransactionWithPostings$.Outbound
        | components.CreateTransactionWithNumscript$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionsV1CreateRequestBody
    > = z.union([
        components.CreateTransactionWithPostings$.outboundSchema,
        components.CreateTransactionWithNumscript$.outboundSchema,
    ]);
}

/** @internal */
export namespace TransactionsV1CreateRequest$ {
    export const inboundSchema: z.ZodType<TransactionsV1CreateRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            RequestBody: z.union([
                components.CreateTransactionWithPostings$.inboundSchema,
                components.CreateTransactionWithNumscript$.inboundSchema,
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        ledger: string;
        RequestBody:
            | components.CreateTransactionWithPostings$.Outbound
            | components.CreateTransactionWithNumscript$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsV1CreateRequest> = z
        .object({
            ledger: z.string(),
            requestBody: z.union([
                components.CreateTransactionWithPostings$.outboundSchema,
                components.CreateTransactionWithNumscript$.outboundSchema,
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace TransactionsV1CreateResponseBody$ {
    export const inboundSchema: z.ZodType<TransactionsV1CreateResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: z.array(components.Transaction$.inboundSchema),
        });

    export type Outbound = {
        data: Array<components.Transaction$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionsV1CreateResponseBody
    > = z.object({
        data: z.array(components.Transaction$.outboundSchema),
    });
}
