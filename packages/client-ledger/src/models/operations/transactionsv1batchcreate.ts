/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type TransactionsV1BatchCreateRequestBody = {
    transaction: Array<components.CreateTransactionWithPostings>;
};

export type TransactionsV1BatchCreateRequest = {
    ledger: string;
    requestBody: TransactionsV1BatchCreateRequestBody;
};

/**
 * The request has succeeded.
 */
export type TransactionsV1BatchCreateResponseBody = {
    data: Array<components.Transaction>;
};

/** @internal */
export namespace TransactionsV1BatchCreateRequestBody$ {
    export const inboundSchema: z.ZodType<
        TransactionsV1BatchCreateRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            transaction: z.array(components.CreateTransactionWithPostings$.inboundSchema),
        })
        .transform((v) => {
            return {
                transaction: v.transaction,
            };
        });

    export type Outbound = {
        transaction: Array<components.CreateTransactionWithPostings$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionsV1BatchCreateRequestBody
    > = z
        .object({
            transaction: z.array(components.CreateTransactionWithPostings$.outboundSchema),
        })
        .transform((v) => {
            return {
                transaction: v.transaction,
            };
        });
}

/** @internal */
export namespace TransactionsV1BatchCreateRequest$ {
    export const inboundSchema: z.ZodType<TransactionsV1BatchCreateRequest, z.ZodTypeDef, unknown> =
        z
            .object({
                ledger: z.string(),
                RequestBody: z.lazy(() => TransactionsV1BatchCreateRequestBody$.inboundSchema),
            })
            .transform((v) => {
                return {
                    ledger: v.ledger,
                    requestBody: v.RequestBody,
                };
            });

    export type Outbound = {
        ledger: string;
        RequestBody: TransactionsV1BatchCreateRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionsV1BatchCreateRequest
    > = z
        .object({
            ledger: z.string(),
            requestBody: z.lazy(() => TransactionsV1BatchCreateRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                RequestBody: v.requestBody,
            };
        });
}

/** @internal */
export namespace TransactionsV1BatchCreateResponseBody$ {
    export const inboundSchema: z.ZodType<
        TransactionsV1BatchCreateResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            data: z.array(components.Transaction$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: Array<components.Transaction$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionsV1BatchCreateResponseBody
    > = z
        .object({
            data: z.array(components.Transaction$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
