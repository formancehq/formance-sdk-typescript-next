/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type TransactionsCreateRequestBody =
    | components.CreateTransactionWithPostings
    | components.CreateTransactionWithNumscript;

export type TransactionsCreateRequest = {
    ledger: string;
    idempotencyKey?: string | undefined;
    dryRun?: boolean | undefined;
    requestBody:
        | components.CreateTransactionWithPostings
        | components.CreateTransactionWithNumscript;
};

/**
 * The request has succeeded.
 */
export type TransactionsCreateResponseBody = {
    data: components.Transaction;
};

/** @internal */
export namespace TransactionsCreateRequestBody$ {
    export const inboundSchema: z.ZodType<TransactionsCreateRequestBody, z.ZodTypeDef, unknown> =
        z.union([
            components.CreateTransactionWithPostings$.inboundSchema,
            components.CreateTransactionWithNumscript$.inboundSchema,
        ]);

    export type Outbound =
        | components.CreateTransactionWithPostings$.Outbound
        | components.CreateTransactionWithNumscript$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsCreateRequestBody> =
        z.union([
            components.CreateTransactionWithPostings$.outboundSchema,
            components.CreateTransactionWithNumscript$.outboundSchema,
        ]);
}

/** @internal */
export namespace TransactionsCreateRequest$ {
    export const inboundSchema: z.ZodType<TransactionsCreateRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            "Idempotency-Key": z.string().optional(),
            dryRun: z.boolean().optional(),
            RequestBody: z.union([
                components.CreateTransactionWithPostings$.inboundSchema,
                components.CreateTransactionWithNumscript$.inboundSchema,
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                "Idempotency-Key": "idempotencyKey",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        ledger: string;
        "Idempotency-Key"?: string | undefined;
        dryRun?: boolean | undefined;
        RequestBody:
            | components.CreateTransactionWithPostings$.Outbound
            | components.CreateTransactionWithNumscript$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsCreateRequest> = z
        .object({
            ledger: z.string(),
            idempotencyKey: z.string().optional(),
            dryRun: z.boolean().optional(),
            requestBody: z.union([
                components.CreateTransactionWithPostings$.outboundSchema,
                components.CreateTransactionWithNumscript$.outboundSchema,
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                idempotencyKey: "Idempotency-Key",
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace TransactionsCreateResponseBody$ {
    export const inboundSchema: z.ZodType<TransactionsCreateResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: components.Transaction$.inboundSchema,
        });

    export type Outbound = {
        data: components.Transaction$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsCreateResponseBody> =
        z.object({
            data: components.Transaction$.outboundSchema,
        });
}
