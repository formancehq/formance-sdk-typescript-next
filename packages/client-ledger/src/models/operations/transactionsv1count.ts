/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TransactionsV1CountRequest = {
    ledger: string;
    reference?: string | undefined;
    account?: string | undefined;
    source?: string | undefined;
    destination?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export namespace TransactionsV1CountRequest$ {
    export const inboundSchema: z.ZodType<TransactionsV1CountRequest, z.ZodTypeDef, unknown> =
        z.object({
            ledger: z.string(),
            reference: z.string().optional(),
            account: z.string().optional(),
            source: z.string().optional(),
            destination: z.string().optional(),
            startTime: z.string().optional(),
            endTime: z.string().optional(),
            metadata: z.record(z.any()).optional(),
        });

    export type Outbound = {
        ledger: string;
        reference?: string | undefined;
        account?: string | undefined;
        source?: string | undefined;
        destination?: string | undefined;
        startTime?: string | undefined;
        endTime?: string | undefined;
        metadata?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsV1CountRequest> =
        z.object({
            ledger: z.string(),
            reference: z.string().optional(),
            account: z.string().optional(),
            source: z.string().optional(),
            destination: z.string().optional(),
            startTime: z.string().optional(),
            endTime: z.string().optional(),
            metadata: z.record(z.any()).optional(),
        });
}
