/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type TransactionsAddMetadataRequestBody = {
    metadata: { [k: string]: string };
};

export type TransactionsAddMetadataRequest = {
    ledger: string;
    id: number;
    dryRun?: boolean | undefined;
    idempotencyKey?: string | undefined;
    requestBody: TransactionsAddMetadataRequestBody;
};

/** @internal */
export namespace TransactionsAddMetadataRequestBody$ {
    export const inboundSchema: z.ZodType<
        TransactionsAddMetadataRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        metadata: z.record(z.string()),
    });

    export type Outbound = {
        metadata: { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionsAddMetadataRequestBody
    > = z.object({
        metadata: z.record(z.string()),
    });
}

/** @internal */
export namespace TransactionsAddMetadataRequest$ {
    export const inboundSchema: z.ZodType<TransactionsAddMetadataRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            id: z.number().int(),
            dryRun: z.boolean().optional(),
            "Idempotency-Key": z.string().optional(),
            RequestBody: z.lazy(() => TransactionsAddMetadataRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                "Idempotency-Key": "idempotencyKey",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        ledger: string;
        id: number;
        dryRun?: boolean | undefined;
        "Idempotency-Key"?: string | undefined;
        RequestBody: TransactionsAddMetadataRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsAddMetadataRequest> =
        z
            .object({
                ledger: z.string(),
                id: z.number().int(),
                dryRun: z.boolean().optional(),
                idempotencyKey: z.string().optional(),
                requestBody: z.lazy(() => TransactionsAddMetadataRequestBody$.outboundSchema),
            })
            .transform((v) => {
                return remap$(v, {
                    idempotencyKey: "Idempotency-Key",
                    requestBody: "RequestBody",
                });
            });
}
