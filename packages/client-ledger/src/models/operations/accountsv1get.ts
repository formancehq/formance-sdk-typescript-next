/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type AccountsV1GetRequest = {
    ledger: string;
    address: string;
};

/**
 * The request has succeeded.
 */
export type AccountsV1GetResponseBody = {
    data: components.Account;
};

/** @internal */
export namespace AccountsV1GetRequest$ {
    export const inboundSchema: z.ZodType<AccountsV1GetRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            address: z.string(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                address: v.address,
            };
        });

    export type Outbound = {
        ledger: string;
        address: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsV1GetRequest> = z
        .object({
            ledger: z.string(),
            address: z.string(),
        })
        .transform((v) => {
            return {
                ledger: v.ledger,
                address: v.address,
            };
        });
}

/** @internal */
export namespace AccountsV1GetResponseBody$ {
    export const inboundSchema: z.ZodType<AccountsV1GetResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            data: components.Account$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: components.Account$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsV1GetResponseBody> = z
        .object({
            data: components.Account$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
