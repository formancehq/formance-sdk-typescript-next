/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type LedgersCreateRequestBody = {
    bucket?: string | undefined;
};

export type LedgersCreateRequest = {
    ledger: string;
    requestBody: LedgersCreateRequestBody;
};

/** @internal */
export namespace LedgersCreateRequestBody$ {
    export const inboundSchema: z.ZodType<LedgersCreateRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            bucket: z.string().optional(),
        });

    export type Outbound = {
        bucket?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersCreateRequestBody> =
        z.object({
            bucket: z.string().optional(),
        });
}

/** @internal */
export namespace LedgersCreateRequest$ {
    export const inboundSchema: z.ZodType<LedgersCreateRequest, z.ZodTypeDef, unknown> = z
        .object({
            ledger: z.string(),
            RequestBody: z.lazy(() => LedgersCreateRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        ledger: string;
        RequestBody: LedgersCreateRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LedgersCreateRequest> = z
        .object({
            ledger: z.string(),
            requestBody: z.lazy(() => LedgersCreateRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}
