/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type TransactionsRevertRequest = {
    ledger: string;
    id: number;
    force?: boolean | undefined;
    atEffectiveDate?: Date | undefined;
};

/**
 * The request has succeeded and a new resource has been created as a result.
 */
export type TransactionsRevertResponseBody = {
    data: components.Transaction;
};

/** @internal */
export namespace TransactionsRevertRequest$ {
    export const inboundSchema: z.ZodType<TransactionsRevertRequest, z.ZodTypeDef, unknown> =
        z.object({
            ledger: z.string(),
            id: z.number().int(),
            force: z.boolean().optional(),
            atEffectiveDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        });

    export type Outbound = {
        ledger: string;
        id: number;
        force?: boolean | undefined;
        atEffectiveDate?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsRevertRequest> =
        z.object({
            ledger: z.string(),
            id: z.number().int(),
            force: z.boolean().optional(),
            atEffectiveDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        });
}

/** @internal */
export namespace TransactionsRevertResponseBody$ {
    export const inboundSchema: z.ZodType<TransactionsRevertResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: components.Transaction$.inboundSchema,
        });

    export type Outbound = {
        data: components.Transaction$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsRevertResponseBody> =
        z.object({
            data: components.Transaction$.outboundSchema,
        });
}
