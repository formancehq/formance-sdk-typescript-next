/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ledgersAddMetadata } from "../funcs/ledgersAddMetadata.js";
import { ledgersBulk } from "../funcs/ledgersBulk.js";
import { ledgersCreate } from "../funcs/ledgersCreate.js";
import { ledgersGet } from "../funcs/ledgersGet.js";
import { ledgersInfo } from "../funcs/ledgersInfo.js";
import { ledgersList } from "../funcs/ledgersList.js";
import { ledgersRemoveMetadata } from "../funcs/ledgersRemoveMetadata.js";
import { ledgersStats } from "../funcs/ledgersStats.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Ledgers extends ClientSDK {
    async list(
        cursor?: string | undefined,
        pageSize?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.LedgersListResponse>> {
        return unwrapResultIterator(ledgersList(this, cursor, pageSize, options));
    }

    async get(
        ledger: string,
        options?: RequestOptions
    ): Promise<operations.LedgersGetResponseBody> {
        return unwrapAsync(ledgersGet(this, ledger, options));
    }

    async create(
        ledger: string,
        requestBody: operations.LedgersCreateRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(ledgersCreate(this, ledger, requestBody, options));
    }

    async bulk(
        ledger: string,
        requestBody: Array<components.BulkAction>,
        options?: RequestOptions
    ): Promise<operations.LedgersBulkResponseBody> {
        return unwrapAsync(ledgersBulk(this, ledger, requestBody, options));
    }

    async info(
        ledger: string,
        options?: RequestOptions
    ): Promise<operations.LedgersInfoResponseBody> {
        return unwrapAsync(ledgersInfo(this, ledger, options));
    }

    async addMetadata(
        ledger: string,
        requestBody: { [k: string]: string },
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(ledgersAddMetadata(this, ledger, requestBody, options));
    }

    async removeMetadata(ledger: string, key: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(ledgersRemoveMetadata(this, ledger, key, options));
    }

    async stats(
        ledger: string,
        options?: RequestOptions
    ): Promise<operations.LedgersStatsResponseBody> {
        return unwrapAsync(ledgersStats(this, ledger, options));
    }
}
