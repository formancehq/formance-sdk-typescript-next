/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { info } from "../funcs/info.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Accounts } from "./accounts.js";
import { Balances } from "./balances.js";
import { Ledgers } from "./ledgers.js";
import { Logs } from "./logs.js";
import { Transactions } from "./transactions.js";

export class LedgerClient extends ClientSDK {
    private _ledgers?: Ledgers;
    get ledgers(): Ledgers {
        return (this._ledgers ??= new Ledgers(this.options$));
    }

    private _accounts?: Accounts;
    get accounts(): Accounts {
        return (this._accounts ??= new Accounts(this.options$));
    }

    private _balances?: Balances;
    get balances(): Balances {
        return (this._balances ??= new Balances(this.options$));
    }

    private _logs?: Logs;
    get logs(): Logs {
        return (this._logs ??= new Logs(this.options$));
    }

    private _transactions?: Transactions;
    get transactions(): Transactions {
        return (this._transactions ??= new Transactions(this.options$));
    }

    async info(options?: RequestOptions): Promise<components.ServerInfo> {
        return unwrapAsync(info(this, options));
    }
}
