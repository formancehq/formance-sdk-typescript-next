/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsAddMetadata } from "../funcs/transactionsAddMetadata.js";
import { transactionsCount } from "../funcs/transactionsCount.js";
import { transactionsCreate } from "../funcs/transactionsCreate.js";
import { transactionsDeleteMetadata } from "../funcs/transactionsDeleteMetadata.js";
import { transactionsGet } from "../funcs/transactionsGet.js";
import { transactionsList } from "../funcs/transactionsList.js";
import { transactionsRevert } from "../funcs/transactionsRevert.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Transactions extends ClientSDK {
    async count(
        ledger: string,
        pit?: Date | undefined,
        query?: { [k: string]: any } | undefined,
        options?: RequestOptions
    ): Promise<operations.TransactionsCountResponse | undefined> {
        return unwrapAsync(transactionsCount(this, ledger, pit, query, options));
    }

    async list(
        request: operations.TransactionsListRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.TransactionsListResponse>> {
        return unwrapResultIterator(transactionsList(this, request, options));
    }

    async create(
        ledger: string,
        requestBody: operations.TransactionsCreateRequestBody,
        idempotencyKey?: string | undefined,
        dryRun?: boolean | undefined,
        options?: RequestOptions
    ): Promise<operations.TransactionsCreateResponseBody> {
        return unwrapAsync(
            transactionsCreate(this, ledger, requestBody, idempotencyKey, dryRun, options)
        );
    }

    async get(
        ledger: string,
        id: number,
        expand?: string | undefined,
        pit?: Date | undefined,
        options?: RequestOptions
    ): Promise<operations.TransactionsGetResponseBody> {
        return unwrapAsync(transactionsGet(this, ledger, id, expand, pit, options));
    }

    async addMetadata(
        request: operations.TransactionsAddMetadataRequest,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(transactionsAddMetadata(this, request, options));
    }

    async deleteMetadata(
        ledger: string,
        id: string,
        key: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(transactionsDeleteMetadata(this, ledger, id, key, options));
    }

    async revert(
        ledger: string,
        id: number,
        force?: boolean | undefined,
        atEffectiveDate?: Date | undefined,
        options?: RequestOptions
    ): Promise<operations.TransactionsRevertResponseBody> {
        return unwrapAsync(transactionsRevert(this, ledger, id, force, atEffectiveDate, options));
    }
}
