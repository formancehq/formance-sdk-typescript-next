/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountsAddMetadata } from "../funcs/accountsAddMetadata.js";
import { accountsCount } from "../funcs/accountsCount.js";
import { accountsGet } from "../funcs/accountsGet.js";
import { accountsList } from "../funcs/accountsList.js";
import { accountsRemoveMetadata } from "../funcs/accountsRemoveMetadata.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Accounts extends ClientSDK {
    async list(
        request: operations.AccountsListRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.AccountsListResponse>> {
        return unwrapResultIterator(accountsList(this, request, options));
    }

    async count(
        ledger: string,
        address: string,
        query: { [k: string]: any },
        pit?: Date | undefined,
        options?: RequestOptions
    ): Promise<operations.AccountsCountResponse | undefined> {
        return unwrapAsync(accountsCount(this, ledger, address, query, pit, options));
    }

    async get(
        ledger: string,
        address: string,
        pit?: Date | undefined,
        expand?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.AccountsGetResponseBody> {
        return unwrapAsync(accountsGet(this, ledger, address, pit, expand, options));
    }

    async addMetadata(
        ledger: string,
        address: string,
        requestBody: operations.AccountsAddMetadataRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(accountsAddMetadata(this, ledger, address, requestBody, options));
    }

    async removeMetadata(
        ledger: string,
        address: string,
        key: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(accountsRemoveMetadata(this, ledger, address, key, options));
    }
}
