/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { connectorsGet } from "../funcs/connectorsGet.js";
import { connectorsGetTask } from "../funcs/connectorsGetTask.js";
import { connectorsInstall } from "../funcs/connectorsInstall.js";
import { connectorsListTask } from "../funcs/connectorsListTask.js";
import { connectorsReset } from "../funcs/connectorsReset.js";
import { connectorsUninstall } from "../funcs/connectorsUninstall.js";
import { connectorsUpdate } from "../funcs/connectorsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Connectors extends ClientSDK {
    async install(
        connector: components.Connector,
        requestBody: operations.ConnectorsInstallRequestBody,
        options?: RequestOptions
    ): Promise<operations.ConnectorsInstallResponseBody> {
        return unwrapAsync(connectorsInstall(this, connector, requestBody, options));
    }

    async uninstall(
        connector: components.Connector,
        connectorID: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(connectorsUninstall(this, connector, connectorID, options));
    }

    async update(
        connector: components.Connector,
        connectorID: string,
        requestBody: operations.ConnectorsUpdateRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(connectorsUpdate(this, connector, connectorID, requestBody, options));
    }

    async get(
        connector: components.Connector,
        connectorId: string,
        options?: RequestOptions
    ): Promise<operations.ConnectorsGetResponseBody> {
        return unwrapAsync(connectorsGet(this, connector, connectorId, options));
    }

    async reset(
        connector: components.Connector,
        connectorId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(connectorsReset(this, connector, connectorId, options));
    }

    async listTask(
        connector: components.Connector,
        connectorId: string,
        pageSize?: number | undefined,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ConnectorsListTaskResponse>> {
        return unwrapResultIterator(
            connectorsListTask(this, connector, connectorId, pageSize, cursor, options)
        );
    }

    async getTask(
        connector: components.Connector,
        connectorId: string,
        taskId: string,
        options?: RequestOptions
    ): Promise<operations.ConnectorsGetTaskResponseBody> {
        return unwrapAsync(connectorsGetTask(this, connector, connectorId, taskId, options));
    }
}
