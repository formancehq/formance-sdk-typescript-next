/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { cashPoolsAddAccount } from "../funcs/cashPoolsAddAccount.js";
import { cashPoolsBalances } from "../funcs/cashPoolsBalances.js";
import { cashPoolsCreate } from "../funcs/cashPoolsCreate.js";
import { cashPoolsDelete } from "../funcs/cashPoolsDelete.js";
import { cashPoolsGet } from "../funcs/cashPoolsGet.js";
import { cashPoolsList } from "../funcs/cashPoolsList.js";
import { cashPoolsRemoveAccount } from "../funcs/cashPoolsRemoveAccount.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class CashPools extends ClientSDK {
    async list(
        cursor?: string | undefined,
        pageSize?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.CashPoolsListResponse>> {
        return unwrapResultIterator(cashPoolsList(this, cursor, pageSize, options));
    }

    async create(
        request: operations.CashPoolsCreateRequestBody,
        options?: RequestOptions
    ): Promise<operations.CashPoolsCreateResponseBody> {
        return unwrapAsync(cashPoolsCreate(this, request, options));
    }

    async get(
        poolId: string,
        options?: RequestOptions
    ): Promise<operations.CashPoolsGetResponseBody> {
        return unwrapAsync(cashPoolsGet(this, poolId, options));
    }

    async delete(poolId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(cashPoolsDelete(this, poolId, options));
    }

    async addAccount(
        poolId: string,
        requestBody: operations.CashPoolsAddAccountRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(cashPoolsAddAccount(this, poolId, requestBody, options));
    }

    async removeAccount(
        poolId: string,
        accountId: string,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(cashPoolsRemoveAccount(this, poolId, accountId, options));
    }

    async balances(
        poolId: string,
        at: Date,
        options?: RequestOptions
    ): Promise<operations.CashPoolsBalancesResponseBody> {
        return unwrapAsync(cashPoolsBalances(this, poolId, at, options));
    }
}
