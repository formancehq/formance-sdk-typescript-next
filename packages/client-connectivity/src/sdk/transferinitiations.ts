/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transferInitiationsCreate } from "../funcs/transferInitiationsCreate.js";
import { transferInitiationsDelete } from "../funcs/transferInitiationsDelete.js";
import { transferInitiationsGet } from "../funcs/transferInitiationsGet.js";
import { transferInitiationsList } from "../funcs/transferInitiationsList.js";
import { transferInitiationsRetry } from "../funcs/transferInitiationsRetry.js";
import { transferInitiationsReverse } from "../funcs/transferInitiationsReverse.js";
import { transferInitiationsUpdateStatus } from "../funcs/transferInitiationsUpdateStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class TransferInitiations extends ClientSDK {
    async list(
        cursor?: string | undefined,
        pageSize?: number | undefined,
        sort?: Array<string> | undefined,
        query?: { [k: string]: any } | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.TransferInitiationsListResponse>> {
        return unwrapResultIterator(
            transferInitiationsList(this, cursor, pageSize, sort, query, options)
        );
    }

    async create(
        request: operations.TransferInitiationsCreateRequestBody,
        options?: RequestOptions
    ): Promise<operations.TransferInitiationsCreateResponseBody> {
        return unwrapAsync(transferInitiationsCreate(this, request, options));
    }

    async get(
        transferId: string,
        options?: RequestOptions
    ): Promise<operations.TransferInitiationsGetResponseBody> {
        return unwrapAsync(transferInitiationsGet(this, transferId, options));
    }

    async delete(transferId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(transferInitiationsDelete(this, transferId, options));
    }

    async retry(transferId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(transferInitiationsRetry(this, transferId, options));
    }

    async reverse(
        transferId: string,
        requestBody: operations.TransferInitiationsReverseRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(transferInitiationsReverse(this, transferId, requestBody, options));
    }

    async updateStatus(
        transferId: string,
        requestBody: operations.TransferInitiationsUpdateStatusRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(transferInitiationsUpdateStatus(this, transferId, requestBody, options));
    }
}
