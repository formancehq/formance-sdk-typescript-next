/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountsBalances } from "../funcs/accountsBalances.js";
import { accountsCreate } from "../funcs/accountsCreate.js";
import { accountsGet } from "../funcs/accountsGet.js";
import { accountsList } from "../funcs/accountsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Accounts extends ClientSDK {
    async list(
        cursor?: string | undefined,
        pageSize?: number | undefined,
        sort?: Array<string> | undefined,
        query?: string | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.AccountsListResponse>> {
        return unwrapResultIterator(accountsList(this, cursor, pageSize, sort, query, options));
    }

    async create(
        request: operations.AccountsCreateRequestBody,
        options?: RequestOptions
    ): Promise<operations.AccountsCreateResponseBody> {
        return unwrapAsync(accountsCreate(this, request, options));
    }

    async get(
        accountId: string,
        options?: RequestOptions
    ): Promise<operations.AccountsGetResponseBody> {
        return unwrapAsync(accountsGet(this, accountId, options));
    }

    async balances(
        request: operations.AccountsBalancesRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.AccountsBalancesResponse>> {
        return unwrapResultIterator(accountsBalances(this, request, options));
    }
}
