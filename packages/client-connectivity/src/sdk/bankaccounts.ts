/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bankAccountsCreate } from "../funcs/bankAccountsCreate.js";
import { bankAccountsForward } from "../funcs/bankAccountsForward.js";
import { bankAccountsGet } from "../funcs/bankAccountsGet.js";
import { bankAccountsList } from "../funcs/bankAccountsList.js";
import { bankAccountsUpdateMetatdata } from "../funcs/bankAccountsUpdateMetatdata.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class BankAccounts extends ClientSDK {
    async create(
        request: operations.BankAccountsCreateRequestBody,
        options?: RequestOptions
    ): Promise<operations.BankAccountsCreateResponseBody> {
        return unwrapAsync(bankAccountsCreate(this, request, options));
    }

    async list(
        cursor?: string | undefined,
        pageSize?: number | undefined,
        sort?: Array<string> | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.BankAccountsListResponse>> {
        return unwrapResultIterator(bankAccountsList(this, cursor, pageSize, sort, options));
    }

    async get(
        bankAccountId: string,
        options?: RequestOptions
    ): Promise<operations.BankAccountsGetResponseBody> {
        return unwrapAsync(bankAccountsGet(this, bankAccountId, options));
    }

    async forward(
        bankAccountId: string,
        requestBody: operations.BankAccountsForwardRequestBody,
        options?: RequestOptions
    ): Promise<operations.BankAccountsForwardResponseBody> {
        return unwrapAsync(bankAccountsForward(this, bankAccountId, requestBody, options));
    }

    async updateMetatdata(
        bankAccountId: string,
        requestBody: operations.BankAccountsUpdateMetatdataRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(bankAccountsUpdateMetatdata(this, bankAccountId, requestBody, options));
    }
}
