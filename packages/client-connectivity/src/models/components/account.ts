/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import {
    AccountType,
    AccountType$inboundSchema,
    AccountType$outboundSchema,
} from "./accounttype.js";
import { Connector, Connector$inboundSchema, Connector$outboundSchema } from "./connector.js";
import * as z from "zod";

export type Account = {
    id: string;
    createdAt: Date;
    reference: string;
    connectorID: string;
    provider?: Connector | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    defaultCurrency: string;
    defaultAsset: string;
    accountName: string;
    type: AccountType;
    pools: Array<string>;
    metadata: { [k: string]: string };
    raw?: any | undefined;
};

/** @internal */
export const Account$inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    reference: z.string(),
    connectorID: z.string(),
    provider: Connector$inboundSchema.optional(),
    defaultCurrency: z.string(),
    defaultAsset: z.string(),
    accountName: z.string(),
    type: AccountType$inboundSchema,
    pools: z.array(z.string()),
    metadata: z.record(z.string()),
    raw: z.any().optional(),
});

/** @internal */
export type Account$Outbound = {
    id: string;
    createdAt: string;
    reference: string;
    connectorID: string;
    provider?: string | undefined;
    defaultCurrency: string;
    defaultAsset: string;
    accountName: string;
    type: string;
    pools: Array<string>;
    metadata: { [k: string]: string };
    raw?: any | undefined;
};

/** @internal */
export const Account$outboundSchema: z.ZodType<Account$Outbound, z.ZodTypeDef, Account> = z.object({
    id: z.string(),
    createdAt: z.date().transform((v) => v.toISOString()),
    reference: z.string(),
    connectorID: z.string(),
    provider: Connector$outboundSchema.optional(),
    defaultCurrency: z.string(),
    defaultAsset: z.string(),
    accountName: z.string(),
    type: AccountType$outboundSchema,
    pools: z.array(z.string()),
    metadata: z.record(z.string()),
    raw: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Account$ {
    /** @deprecated use `Account$inboundSchema` instead. */
    export const inboundSchema = Account$inboundSchema;
    /** @deprecated use `Account$outboundSchema` instead. */
    export const outboundSchema = Account$outboundSchema;
    /** @deprecated use `Account$Outbound` instead. */
    export type Outbound = Account$Outbound;
}
