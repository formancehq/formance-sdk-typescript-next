/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AccountBalance = {
    accountId: string;
    createdAt: Date;
    lastUpdatedAt: Date;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    currency: string;
    asset: string;
    balance: number;
};

/** @internal */
export namespace AccountBalance$ {
    export const inboundSchema: z.ZodType<AccountBalance, z.ZodTypeDef, unknown> = z.object({
        accountId: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        lastUpdatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        currency: z.string(),
        asset: z.string(),
        balance: z.number().int(),
    });

    export type Outbound = {
        accountId: string;
        createdAt: string;
        lastUpdatedAt: string;
        currency: string;
        asset: string;
        balance: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountBalance> = z.object({
        accountId: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        lastUpdatedAt: z.date().transform((v) => v.toISOString()),
        currency: z.string(),
        asset: z.string(),
        balance: z.number().int(),
    });
}
