/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type SchemeFormanceOAuth = {
    clientID: string;
    clientSecret: string;
    tokenURL?: "/api/auth/oauth/token" | undefined;
};

/** @internal */
export namespace SchemeFormanceOAuth$ {
    export const inboundSchema: z.ZodType<SchemeFormanceOAuth, z.ZodTypeDef, unknown> = z
        .object({
            ClientID: z.string(),
            ClientSecret: z.string(),
            TokenURL: z.literal("/api/auth/oauth/token").optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ClientID: "clientID",
                ClientSecret: "clientSecret",
                TokenURL: "tokenURL",
            });
        });

    export type Outbound = {
        ClientID: string;
        ClientSecret: string;
        TokenURL: "/api/auth/oauth/token";
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SchemeFormanceOAuth> = z
        .object({
            clientID: z.string(),
            clientSecret: z.string(),
            tokenURL: z.literal("/api/auth/oauth/token").default("/api/auth/oauth/token" as const),
        })
        .transform((v) => {
            return remap$(v, {
                clientID: "ClientID",
                clientSecret: "ClientSecret",
                tokenURL: "TokenURL",
            });
        });
}
