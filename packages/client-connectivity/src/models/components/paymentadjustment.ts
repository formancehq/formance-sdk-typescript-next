/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    PaymentStatus,
    PaymentStatus$inboundSchema,
    PaymentStatus$outboundSchema,
} from "./paymentstatus.js";
import * as z from "zod";

export type PaymentAdjustment = {
    reference: string;
    createdAt: Date;
    status: PaymentStatus;
    amount: number;
    raw: { [k: string]: any };
};

/** @internal */
export const PaymentAdjustment$inboundSchema: z.ZodType<PaymentAdjustment, z.ZodTypeDef, unknown> =
    z.object({
        reference: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        status: PaymentStatus$inboundSchema,
        amount: z.number().int(),
        raw: z.record(z.any()),
    });

/** @internal */
export type PaymentAdjustment$Outbound = {
    reference: string;
    createdAt: string;
    status: string;
    amount: number;
    raw: { [k: string]: any };
};

/** @internal */
export const PaymentAdjustment$outboundSchema: z.ZodType<
    PaymentAdjustment$Outbound,
    z.ZodTypeDef,
    PaymentAdjustment
> = z.object({
    reference: z.string(),
    createdAt: z.date().transform((v) => v.toISOString()),
    status: PaymentStatus$outboundSchema,
    amount: z.number().int(),
    raw: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentAdjustment$ {
    /** @deprecated use `PaymentAdjustment$inboundSchema` instead. */
    export const inboundSchema = PaymentAdjustment$inboundSchema;
    /** @deprecated use `PaymentAdjustment$outboundSchema` instead. */
    export const outboundSchema = PaymentAdjustment$outboundSchema;
    /** @deprecated use `PaymentAdjustment$Outbound` instead. */
    export type Outbound = PaymentAdjustment$Outbound;
}
