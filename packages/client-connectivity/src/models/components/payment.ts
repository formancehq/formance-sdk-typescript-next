/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Connector, Connector$ } from "./connector.js";
import { PaymentAdjustment, PaymentAdjustment$ } from "./paymentadjustment.js";
import { PaymentScheme, PaymentScheme$ } from "./paymentscheme.js";
import { PaymentStatus, PaymentStatus$ } from "./paymentstatus.js";
import { PaymentType, PaymentType$ } from "./paymenttype.js";
import * as z from "zod";

export type Payment = {
    reference: string;
    connectorID: string;
    amount: number;
    type: PaymentType;
    status: PaymentStatus;
    scheme: PaymentScheme;
    asset: string;
    id: string;
    sourceAccountID: string;
    destinationAccountID: string;
    provider?: Connector | undefined;
    initialAmount: number;
    createdAt: Date;
    raw: { [k: string]: any };
    adjustments: Array<PaymentAdjustment>;
    metadata?: { [k: string]: string } | undefined;
};

/** @internal */
export namespace Payment$ {
    export const inboundSchema: z.ZodType<Payment, z.ZodTypeDef, unknown> = z.object({
        reference: z.string(),
        connectorID: z.string(),
        amount: z.number().int(),
        type: PaymentType$.inboundSchema,
        status: PaymentStatus$.inboundSchema,
        scheme: PaymentScheme$.inboundSchema,
        asset: z.string(),
        id: z.string(),
        sourceAccountID: z.string(),
        destinationAccountID: z.string(),
        provider: Connector$.inboundSchema.optional(),
        initialAmount: z.number().int(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        raw: z.record(z.any()),
        adjustments: z.array(PaymentAdjustment$.inboundSchema),
        metadata: z.record(z.string()).optional(),
    });

    export type Outbound = {
        reference: string;
        connectorID: string;
        amount: number;
        type: string;
        status: string;
        scheme: string;
        asset: string;
        id: string;
        sourceAccountID: string;
        destinationAccountID: string;
        provider?: string | undefined;
        initialAmount: number;
        createdAt: string;
        raw: { [k: string]: any };
        adjustments: Array<PaymentAdjustment$.Outbound>;
        metadata?: { [k: string]: string } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Payment> = z.object({
        reference: z.string(),
        connectorID: z.string(),
        amount: z.number().int(),
        type: PaymentType$.outboundSchema,
        status: PaymentStatus$.outboundSchema,
        scheme: PaymentScheme$.outboundSchema,
        asset: z.string(),
        id: z.string(),
        sourceAccountID: z.string(),
        destinationAccountID: z.string(),
        provider: Connector$.outboundSchema.optional(),
        initialAmount: z.number().int(),
        createdAt: z.date().transform((v) => v.toISOString()),
        raw: z.record(z.any()),
        adjustments: z.array(PaymentAdjustment$.outboundSchema),
        metadata: z.record(z.string()).optional(),
    });
}
