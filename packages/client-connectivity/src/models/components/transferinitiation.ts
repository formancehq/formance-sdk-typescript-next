/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    TransferInitiationPayment,
    TransferInitiationPayment$,
} from "./transferinitiationpayment.js";
import { TransferInitiationStatus, TransferInitiationStatus$ } from "./transferinitiationstatus.js";
import { TransferInitiationType, TransferInitiationType$ } from "./transferinitiationtype.js";
import * as z from "zod";

export type TransferInitiation = {
    id: string;
    reference: string;
    createdAt: Date;
    scheduledAt: Date;
    description: string;
    sourceAccountID: string;
    destinationAccountID: string;
    connectorID: string;
    type: TransferInitiationType;
    amount: number;
    initialAmount: number;
    asset: string;
    status: TransferInitiationStatus;
    error: string;
    metadata?: { [k: string]: string } | undefined;
    relatedPayments?: Array<TransferInitiationPayment> | undefined;
};

/** @internal */
export namespace TransferInitiation$ {
    export const inboundSchema: z.ZodType<TransferInitiation, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        reference: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        scheduledAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        description: z.string(),
        sourceAccountID: z.string(),
        destinationAccountID: z.string(),
        connectorID: z.string(),
        type: TransferInitiationType$.inboundSchema,
        amount: z.number().int(),
        initialAmount: z.number().int(),
        asset: z.string(),
        status: TransferInitiationStatus$.inboundSchema,
        error: z.string(),
        metadata: z.record(z.string()).optional(),
        relatedPayments: z.array(TransferInitiationPayment$.inboundSchema).optional(),
    });

    export type Outbound = {
        id: string;
        reference: string;
        createdAt: string;
        scheduledAt: string;
        description: string;
        sourceAccountID: string;
        destinationAccountID: string;
        connectorID: string;
        type: string;
        amount: number;
        initialAmount: number;
        asset: string;
        status: string;
        error: string;
        metadata?: { [k: string]: string } | undefined;
        relatedPayments?: Array<TransferInitiationPayment$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferInitiation> = z.object({
        id: z.string(),
        reference: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        scheduledAt: z.date().transform((v) => v.toISOString()),
        description: z.string(),
        sourceAccountID: z.string(),
        destinationAccountID: z.string(),
        connectorID: z.string(),
        type: TransferInitiationType$.outboundSchema,
        amount: z.number().int(),
        initialAmount: z.number().int(),
        asset: z.string(),
        status: TransferInitiationStatus$.outboundSchema,
        error: z.string(),
        metadata: z.record(z.string()).optional(),
        relatedPayments: z.array(TransferInitiationPayment$.outboundSchema).optional(),
    });
}
