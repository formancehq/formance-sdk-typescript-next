/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { SchemeFormanceOAuth, SchemeFormanceOAuth$ } from "./schemeformanceoauth.js";
import * as z from "zod";

export type Security = {
    formanceOAuth?: SchemeFormanceOAuth | undefined;
    bearerAuth?: string | undefined;
};

/** @internal */
export namespace Security$ {
    export const inboundSchema: z.ZodType<Security, z.ZodTypeDef, unknown> = z
        .object({
            FormanceOAuth: SchemeFormanceOAuth$.inboundSchema.optional(),
            BearerAuth: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                FormanceOAuth: "formanceOAuth",
                BearerAuth: "bearerAuth",
            });
        });

    export type Outbound = {
        FormanceOAuth?: SchemeFormanceOAuth$.Outbound | undefined;
        BearerAuth?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Security> = z
        .object({
            formanceOAuth: SchemeFormanceOAuth$.outboundSchema.optional(),
            bearerAuth: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                formanceOAuth: "FormanceOAuth",
                bearerAuth: "BearerAuth",
            });
        });
}
