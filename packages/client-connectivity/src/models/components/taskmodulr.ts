/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    PaymentStatus,
    PaymentStatus$inboundSchema,
    PaymentStatus$outboundSchema,
} from "./paymentstatus.js";
import * as z from "zod";

export type TaskModulr = {
    id: string;
    connectorID: string;
    createdAt: Date;
    updatedAt: Date;
    status: PaymentStatus;
    state: { [k: string]: any };
    error?: string | undefined;
    descriptor: string;
};

/** @internal */
export const TaskModulr$inboundSchema: z.ZodType<TaskModulr, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
    connectorID: z.string(),
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    updatedAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    status: PaymentStatus$inboundSchema,
    state: z.record(z.any()),
    error: z.string().optional(),
    descriptor: z.string(),
});

/** @internal */
export type TaskModulr$Outbound = {
    id: string;
    connectorID: string;
    createdAt: string;
    updatedAt: string;
    status: string;
    state: { [k: string]: any };
    error?: string | undefined;
    descriptor: string;
};

/** @internal */
export const TaskModulr$outboundSchema: z.ZodType<TaskModulr$Outbound, z.ZodTypeDef, TaskModulr> =
    z.object({
        id: z.string(),
        connectorID: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        updatedAt: z.date().transform((v) => v.toISOString()),
        status: PaymentStatus$outboundSchema,
        state: z.record(z.any()),
        error: z.string().optional(),
        descriptor: z.string(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaskModulr$ {
    /** @deprecated use `TaskModulr$inboundSchema` instead. */
    export const inboundSchema = TaskModulr$inboundSchema;
    /** @deprecated use `TaskModulr$outboundSchema` instead. */
    export const outboundSchema = TaskModulr$outboundSchema;
    /** @deprecated use `TaskModulr$Outbound` instead. */
    export type Outbound = TaskModulr$Outbound;
}
