/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ConnectorsInstallRequestBody =
    | components.WiseConfig
    | components.StripeConfig
    | components.GenericConfig
    | components.ModulrConfig
    | components.CurrencyCloudConfig
    | components.MangoPayConfig
    | components.MoneycorpConfig
    | components.AdyenConfig
    | components.DumypayConfig
    | components.AtlarConfig
    | components.BankingCircleConfig;

export type ConnectorsInstallRequest = {
    connector: components.Connector;
    requestBody:
        | components.WiseConfig
        | components.StripeConfig
        | components.GenericConfig
        | components.ModulrConfig
        | components.CurrencyCloudConfig
        | components.MangoPayConfig
        | components.MoneycorpConfig
        | components.AdyenConfig
        | components.DumypayConfig
        | components.AtlarConfig
        | components.BankingCircleConfig;
};

export type Data = {
    connectorId: string;
};

/**
 * The request has succeeded and a new resource has been created as a result.
 */
export type ConnectorsInstallResponseBody = {
    data: Data;
};

/** @internal */
export namespace ConnectorsInstallRequestBody$ {
    export const inboundSchema: z.ZodType<ConnectorsInstallRequestBody, z.ZodTypeDef, unknown> =
        z.union([
            components.WiseConfig$.inboundSchema,
            components.StripeConfig$.inboundSchema,
            components.GenericConfig$.inboundSchema,
            components.ModulrConfig$.inboundSchema,
            components.CurrencyCloudConfig$.inboundSchema,
            components.MangoPayConfig$.inboundSchema,
            components.MoneycorpConfig$.inboundSchema,
            components.AdyenConfig$.inboundSchema,
            components.DumypayConfig$.inboundSchema,
            components.AtlarConfig$.inboundSchema,
            components.BankingCircleConfig$.inboundSchema,
        ]);

    export type Outbound =
        | components.WiseConfig$.Outbound
        | components.StripeConfig$.Outbound
        | components.GenericConfig$.Outbound
        | components.ModulrConfig$.Outbound
        | components.CurrencyCloudConfig$.Outbound
        | components.MangoPayConfig$.Outbound
        | components.MoneycorpConfig$.Outbound
        | components.AdyenConfig$.Outbound
        | components.DumypayConfig$.Outbound
        | components.AtlarConfig$.Outbound
        | components.BankingCircleConfig$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsInstallRequestBody> =
        z.union([
            components.WiseConfig$.outboundSchema,
            components.StripeConfig$.outboundSchema,
            components.GenericConfig$.outboundSchema,
            components.ModulrConfig$.outboundSchema,
            components.CurrencyCloudConfig$.outboundSchema,
            components.MangoPayConfig$.outboundSchema,
            components.MoneycorpConfig$.outboundSchema,
            components.AdyenConfig$.outboundSchema,
            components.DumypayConfig$.outboundSchema,
            components.AtlarConfig$.outboundSchema,
            components.BankingCircleConfig$.outboundSchema,
        ]);
}

/** @internal */
export namespace ConnectorsInstallRequest$ {
    export const inboundSchema: z.ZodType<ConnectorsInstallRequest, z.ZodTypeDef, unknown> = z
        .object({
            connector: components.Connector$.inboundSchema,
            RequestBody: z.union([
                components.WiseConfig$.inboundSchema,
                components.StripeConfig$.inboundSchema,
                components.GenericConfig$.inboundSchema,
                components.ModulrConfig$.inboundSchema,
                components.CurrencyCloudConfig$.inboundSchema,
                components.MangoPayConfig$.inboundSchema,
                components.MoneycorpConfig$.inboundSchema,
                components.AdyenConfig$.inboundSchema,
                components.DumypayConfig$.inboundSchema,
                components.AtlarConfig$.inboundSchema,
                components.BankingCircleConfig$.inboundSchema,
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        connector: string;
        RequestBody:
            | components.WiseConfig$.Outbound
            | components.StripeConfig$.Outbound
            | components.GenericConfig$.Outbound
            | components.ModulrConfig$.Outbound
            | components.CurrencyCloudConfig$.Outbound
            | components.MangoPayConfig$.Outbound
            | components.MoneycorpConfig$.Outbound
            | components.AdyenConfig$.Outbound
            | components.DumypayConfig$.Outbound
            | components.AtlarConfig$.Outbound
            | components.BankingCircleConfig$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsInstallRequest> = z
        .object({
            connector: components.Connector$.outboundSchema,
            requestBody: z.union([
                components.WiseConfig$.outboundSchema,
                components.StripeConfig$.outboundSchema,
                components.GenericConfig$.outboundSchema,
                components.ModulrConfig$.outboundSchema,
                components.CurrencyCloudConfig$.outboundSchema,
                components.MangoPayConfig$.outboundSchema,
                components.MoneycorpConfig$.outboundSchema,
                components.AdyenConfig$.outboundSchema,
                components.DumypayConfig$.outboundSchema,
                components.AtlarConfig$.outboundSchema,
                components.BankingCircleConfig$.outboundSchema,
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace Data$ {
    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z.object({
        connectorId: z.string(),
    });

    export type Outbound = {
        connectorId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z.object({
        connectorId: z.string(),
    });
}

/** @internal */
export namespace ConnectorsInstallResponseBody$ {
    export const inboundSchema: z.ZodType<ConnectorsInstallResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: z.lazy(() => Data$.inboundSchema),
        });

    export type Outbound = {
        data: Data$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsInstallResponseBody> =
        z.object({
            data: z.lazy(() => Data$.outboundSchema),
        });
}
