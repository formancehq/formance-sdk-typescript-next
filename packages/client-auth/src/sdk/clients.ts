/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientsCreate } from "../funcs/clientsCreate.js";
import { clientsDelete } from "../funcs/clientsDelete.js";
import { clientsGet } from "../funcs/clientsGet.js";
import { clientsList } from "../funcs/clientsList.js";
import { clientsUpdate } from "../funcs/clientsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Clients extends ClientSDK {
    async list(
        cursor?: string | undefined,
        pageSize?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ClientsListResponse>> {
        return unwrapResultIterator(clientsList(this, cursor, pageSize, options));
    }

    async create(
        request: components.ClientData,
        options?: RequestOptions
    ): Promise<operations.ClientsCreateResponseBody> {
        return unwrapAsync(clientsCreate(this, request, options));
    }

    async get(id: string, options?: RequestOptions): Promise<operations.ClientsGetResponseBody> {
        return unwrapAsync(clientsGet(this, id, options));
    }

    async update(
        id: string,
        clientData: components.ClientData,
        options?: RequestOptions
    ): Promise<operations.ClientsUpdateResponseBody> {
        return unwrapAsync(clientsUpdate(this, id, clientData, options));
    }

    async delete(id: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(clientsDelete(this, id, options));
    }
}
