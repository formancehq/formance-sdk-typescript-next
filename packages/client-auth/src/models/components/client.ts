/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Secret, Secret$ } from "./secret";
import * as z from "zod";

export type Client = {
    public?: boolean | undefined;
    redirectUris?: Array<string> | undefined;
    description?: string | undefined;
    name: string;
    trusted: boolean;
    postLogoutRedirectUris?: Array<string> | undefined;
    metadata?: { [k: string]: string } | undefined;
    id: string;
    secrets?: Array<Secret> | undefined;
    scopes?: Array<string> | undefined;
};

/** @internal */
export namespace Client$ {
    export const inboundSchema: z.ZodType<Client, z.ZodTypeDef, unknown> = z.object({
        public: z.boolean().optional(),
        redirectUris: z.array(z.string()).optional(),
        description: z.string().optional(),
        name: z.string(),
        trusted: z.boolean(),
        postLogoutRedirectUris: z.array(z.string()).optional(),
        metadata: z.record(z.string()).optional(),
        id: z.string(),
        secrets: z.array(Secret$.inboundSchema).optional(),
        scopes: z.array(z.string()).optional(),
    });

    export type Outbound = {
        public?: boolean | undefined;
        redirectUris?: Array<string> | undefined;
        description?: string | undefined;
        name: string;
        trusted: boolean;
        postLogoutRedirectUris?: Array<string> | undefined;
        metadata?: { [k: string]: string } | undefined;
        id: string;
        secrets?: Array<Secret$.Outbound> | undefined;
        scopes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Client> = z.object({
        public: z.boolean().optional(),
        redirectUris: z.array(z.string()).optional(),
        description: z.string().optional(),
        name: z.string(),
        trusted: z.boolean(),
        postLogoutRedirectUris: z.array(z.string()).optional(),
        metadata: z.record(z.string()).optional(),
        id: z.string(),
        secrets: z.array(Secret$.outboundSchema).optional(),
        scopes: z.array(z.string()).optional(),
    });
}
