/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Secret, Secret$inboundSchema, Secret$Outbound, Secret$outboundSchema } from "./secret.js";
import * as z from "zod";

export type Client = {
    public?: boolean | undefined;
    redirectUris?: Array<string> | undefined;
    description?: string | undefined;
    name: string;
    trusted: boolean;
    postLogoutRedirectUris?: Array<string> | undefined;
    metadata?: { [k: string]: string } | undefined;
    id: string;
    secrets?: Array<Secret> | undefined;
    scopes?: Array<string> | undefined;
};

/** @internal */
export const Client$inboundSchema: z.ZodType<Client, z.ZodTypeDef, unknown> = z.object({
    public: z.boolean().optional(),
    redirectUris: z.array(z.string()).optional(),
    description: z.string().optional(),
    name: z.string(),
    trusted: z.boolean(),
    postLogoutRedirectUris: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    id: z.string(),
    secrets: z.array(Secret$inboundSchema).optional(),
    scopes: z.array(z.string()).optional(),
});

/** @internal */
export type Client$Outbound = {
    public?: boolean | undefined;
    redirectUris?: Array<string> | undefined;
    description?: string | undefined;
    name: string;
    trusted: boolean;
    postLogoutRedirectUris?: Array<string> | undefined;
    metadata?: { [k: string]: string } | undefined;
    id: string;
    secrets?: Array<Secret$Outbound> | undefined;
    scopes?: Array<string> | undefined;
};

/** @internal */
export const Client$outboundSchema: z.ZodType<Client$Outbound, z.ZodTypeDef, Client> = z.object({
    public: z.boolean().optional(),
    redirectUris: z.array(z.string()).optional(),
    description: z.string().optional(),
    name: z.string(),
    trusted: z.boolean(),
    postLogoutRedirectUris: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    id: z.string(),
    secrets: z.array(Secret$outboundSchema).optional(),
    scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Client$ {
    /** @deprecated use `Client$inboundSchema` instead. */
    export const inboundSchema = Client$inboundSchema;
    /** @deprecated use `Client$outboundSchema` instead. */
    export const outboundSchema = Client$outboundSchema;
    /** @deprecated use `Client$Outbound` instead. */
    export type Outbound = Client$Outbound;
}
