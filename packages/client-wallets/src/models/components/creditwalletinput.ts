/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WalletCounterpart, WalletCounterpart$ } from "./walletcounterpart.js";
import * as z from "zod";

export type Amount = {
    asset: string;
    amount: number;
};

export type CreditWalletInput = {
    amount: Amount;
    metadata: { [k: string]: string };
    source: WalletCounterpart;
    reference?: string | undefined;
    balance?: string | undefined;
    tinestamp?: string | undefined;
};

/** @internal */
export namespace Amount$ {
    export const inboundSchema: z.ZodType<Amount, z.ZodTypeDef, unknown> = z.object({
        asset: z.string(),
        amount: z.number().int(),
    });

    export type Outbound = {
        asset: string;
        amount: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Amount> = z.object({
        asset: z.string(),
        amount: z.number().int(),
    });
}

/** @internal */
export namespace CreditWalletInput$ {
    export const inboundSchema: z.ZodType<CreditWalletInput, z.ZodTypeDef, unknown> = z.object({
        amount: z.lazy(() => Amount$.inboundSchema),
        metadata: z.record(z.string()),
        source: WalletCounterpart$.inboundSchema,
        reference: z.string().optional(),
        balance: z.string().optional(),
        tinestamp: z.string().optional(),
    });

    export type Outbound = {
        amount: Amount$.Outbound;
        metadata: { [k: string]: string };
        source: WalletCounterpart$.Outbound;
        reference?: string | undefined;
        balance?: string | undefined;
        tinestamp?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreditWalletInput> = z.object({
        amount: z.lazy(() => Amount$.outboundSchema),
        metadata: z.record(z.string()),
        source: WalletCounterpart$.outboundSchema,
        reference: z.string().optional(),
        balance: z.string().optional(),
        tinestamp: z.string().optional(),
    });
}
