/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WalletCounterpartAccount, WalletCounterpartAccount$ } from "./walletcounterpartaccount.js";
import { WalletCounterpartWallet, WalletCounterpartWallet$ } from "./walletcounterpartwallet.js";
import * as z from "zod";

export type WalletCounterpart =
    | (WalletCounterpartAccount & { type: "ACCOUNT" })
    | (WalletCounterpartWallet & { type: "WALLET" });

/** @internal */
export namespace WalletCounterpart$ {
    export const inboundSchema: z.ZodType<WalletCounterpart, z.ZodTypeDef, unknown> = z.union([
        WalletCounterpartAccount$.inboundSchema.and(
            z.object({ type: z.literal("ACCOUNT") }).transform((v) => ({ type: v.type }))
        ),
        WalletCounterpartWallet$.inboundSchema.and(
            z.object({ type: z.literal("WALLET") }).transform((v) => ({ type: v.type }))
        ),
    ]);

    export type Outbound =
        | (WalletCounterpartAccount$.Outbound & { type: "ACCOUNT" })
        | (WalletCounterpartWallet$.Outbound & { type: "WALLET" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WalletCounterpart> = z.union([
        WalletCounterpartAccount$.outboundSchema.and(
            z.object({ type: z.literal("ACCOUNT") }).transform((v) => ({ type: v.type }))
        ),
        WalletCounterpartWallet$.outboundSchema.and(
            z.object({ type: z.literal("WALLET") }).transform((v) => ({ type: v.type }))
        ),
    ]);
}
