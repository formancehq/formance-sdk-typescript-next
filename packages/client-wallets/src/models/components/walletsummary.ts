/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { BalancesWithAssets, BalancesWithAssets$ } from "./balanceswithassets";
import * as z from "zod";

export type WalletSummary = {
    balances: BalancesWithAssets;
    availableFunds: { [k: string]: number };
    expiredFunds: { [k: string]: number };
    expirableFunds: { [k: string]: number };
    holdFunds: { [k: string]: number };
};

/** @internal */
export namespace WalletSummary$ {
    export const inboundSchema: z.ZodType<WalletSummary, z.ZodTypeDef, unknown> = z.object({
        balances: BalancesWithAssets$.inboundSchema,
        availableFunds: z.record(z.number().int()),
        expiredFunds: z.record(z.number().int()),
        expirableFunds: z.record(z.number().int()),
        holdFunds: z.record(z.number().int()),
    });

    export type Outbound = {
        balances: BalancesWithAssets$.Outbound;
        availableFunds: { [k: string]: number };
        expiredFunds: { [k: string]: number };
        expirableFunds: { [k: string]: number };
        holdFunds: { [k: string]: number };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WalletSummary> = z.object({
        balances: BalancesWithAssets$.outboundSchema,
        availableFunds: z.record(z.number().int()),
        expiredFunds: z.record(z.number().int()),
        expirableFunds: z.record(z.number().int()),
        holdFunds: z.record(z.number().int()),
    });
}
