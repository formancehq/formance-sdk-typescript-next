/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type BalancesCreateRequestBody = {
    name: string;
    expiresAt?: Date | undefined;
    priority?: number | undefined;
};

export type BalancesCreateRequest = {
    walletId: string;
    requestBody: BalancesCreateRequestBody;
};

/**
 * The request has succeeded and a new resource has been created as a result.
 */
export type BalancesCreateResponseBody = {
    data: components.Balance;
};

/** @internal */
export namespace BalancesCreateRequestBody$ {
    export const inboundSchema: z.ZodType<BalancesCreateRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            name: z.string(),
            expiresAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            priority: z.number().int().optional(),
        });

    export type Outbound = {
        name: string;
        expiresAt?: string | undefined;
        priority?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesCreateRequestBody> =
        z.object({
            name: z.string(),
            expiresAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            priority: z.number().int().optional(),
        });
}

/** @internal */
export namespace BalancesCreateRequest$ {
    export const inboundSchema: z.ZodType<BalancesCreateRequest, z.ZodTypeDef, unknown> = z
        .object({
            walletId: z.string(),
            RequestBody: z.lazy(() => BalancesCreateRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        walletId: string;
        RequestBody: BalancesCreateRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesCreateRequest> = z
        .object({
            walletId: z.string(),
            requestBody: z.lazy(() => BalancesCreateRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace BalancesCreateResponseBody$ {
    export const inboundSchema: z.ZodType<BalancesCreateResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: components.Balance$.inboundSchema,
        });

    export type Outbound = {
        data: components.Balance$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesCreateResponseBody> =
        z.object({
            data: components.Balance$.outboundSchema,
        });
}
