/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { walletsCreate } from "../funcs/walletsCreate.js";
import { walletsCredit } from "../funcs/walletsCredit.js";
import { walletsDebit } from "../funcs/walletsDebit.js";
import { walletsGet } from "../funcs/walletsGet.js";
import { walletsList } from "../funcs/walletsList.js";
import { walletsSummary } from "../funcs/walletsSummary.js";
import { walletsUpdate } from "../funcs/walletsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Wallets extends ClientSDK {
    async list(
        name: string,
        metadata: { [k: string]: string },
        cursor?: string | undefined,
        pageSize?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.WalletsListResponse>> {
        return unwrapResultIterator(walletsList(this, name, metadata, cursor, pageSize, options));
    }

    async create(
        request: operations.WalletsCreateRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(walletsCreate(this, request, options));
    }

    async get(
        id: string,
        options?: RequestOptions
    ): Promise<operations.WalletsGetResponseBody | undefined> {
        return unwrapAsync(walletsGet(this, id, options));
    }

    async update(
        id: string,
        requestBody: operations.WalletsUpdateRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(walletsUpdate(this, id, requestBody, options));
    }

    async credit(
        id: string,
        creditWalletInput: components.CreditWalletInput,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(walletsCredit(this, id, creditWalletInput, options));
    }

    async debit(
        id: string,
        debitWalletInput: components.DebitWalletInput,
        options?: RequestOptions
    ): Promise<operations.WalletsDebitResponseBody | undefined> {
        return unwrapAsync(walletsDebit(this, id, debitWalletInput, options));
    }

    async summary(
        id: string,
        options?: RequestOptions
    ): Promise<operations.WalletsSummaryResponseBody | undefined> {
        return unwrapAsync(walletsSummary(this, id, options));
    }
}
