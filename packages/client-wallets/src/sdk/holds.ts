/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { holdsCancel } from "../funcs/holdsCancel.js";
import { holdsConfirm } from "../funcs/holdsConfirm.js";
import { holdsGet } from "../funcs/holdsGet.js";
import { holdsList } from "../funcs/holdsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Holds extends ClientSDK {
    async list(
        walletID: string,
        cursor?: string | undefined,
        pageSize?: number | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.HoldsListResponse>> {
        return unwrapResultIterator(holdsList(this, walletID, cursor, pageSize, options));
    }

    async get(holdId: string, options?: RequestOptions): Promise<operations.HoldsGetResponseBody> {
        return unwrapAsync(holdsGet(this, holdId, options));
    }

    async confirm(
        holdId: string,
        requestBody: operations.HoldsConfirmRequestBody,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(holdsConfirm(this, holdId, requestBody, options));
    }

    async cancel(holdId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(holdsCancel(this, holdId, options));
    }
}
