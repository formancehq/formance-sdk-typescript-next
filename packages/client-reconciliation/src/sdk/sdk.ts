/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { info } from "../funcs/info.js";
import { reconcile } from "../funcs/reconcile.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PoliciesV1 } from "./policiesv1.js";
import { ReconciliationsV1 } from "./reconciliationsv1.js";

export class ReconciliationClient extends ClientSDK {
    private _policiesV1?: PoliciesV1;
    get policiesV1(): PoliciesV1 {
        return (this._policiesV1 ??= new PoliciesV1(this.options$));
    }

    private _reconciliationsV1?: ReconciliationsV1;
    get reconciliationsV1(): ReconciliationsV1 {
        return (this._reconciliationsV1 ??= new ReconciliationsV1(this.options$));
    }

    async info(options?: RequestOptions): Promise<operations.InfoResponseBody> {
        return unwrapAsync(info(this, options));
    }

    async reconcile(
        policyID: string,
        requestBody: operations.ReconcileRequestBody,
        options?: RequestOptions
    ): Promise<operations.ReconcileResponseBody> {
        return unwrapAsync(reconcile(this, policyID, requestBody, options));
    }
}
