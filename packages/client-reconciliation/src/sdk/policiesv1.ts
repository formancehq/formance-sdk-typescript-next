/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { policiesV1Create } from "../funcs/policiesV1Create.js";
import { policiesV1Delete } from "../funcs/policiesV1Delete.js";
import { policiesV1Get } from "../funcs/policiesV1Get.js";
import { policiesV1List } from "../funcs/policiesV1List.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class PoliciesV1 extends ClientSDK {
    async create(
        request: operations.PoliciesV1CreateRequestBody,
        options?: RequestOptions
    ): Promise<operations.PoliciesV1CreateResponseBody> {
        return unwrapAsync(policiesV1Create(this, request, options));
    }

    async list(
        pageSize: number | undefined,
        cursor?: string | undefined,
        options?: RequestOptions
    ): Promise<PageIterator<operations.PoliciesV1ListResponse>> {
        return unwrapResultIterator(policiesV1List(this, pageSize, cursor, options));
    }

    async delete(policyID: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(policiesV1Delete(this, policyID, options));
    }

    async get(
        policyID: string,
        options?: RequestOptions
    ): Promise<operations.PoliciesV1GetResponseBody> {
        return unwrapAsync(policiesV1Get(this, policyID, options));
    }
}
