/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type PoliciesV1ListRequest = {
    pageSize?: number | undefined;
    cursor?: string | undefined;
};

export type Cursor = {
    next?: string | undefined;
    data: Array<components.Policy>;
};

/**
 * The request has succeeded.
 */
export type PoliciesV1ListResponseBody = {
    cursor: Cursor;
};

export type PoliciesV1ListResponse = {
    result: PoliciesV1ListResponseBody;
};

/** @internal */
export namespace PoliciesV1ListRequest$ {
    export const inboundSchema: z.ZodType<PoliciesV1ListRequest, z.ZodTypeDef, unknown> = z
        .object({
            pageSize: z.number().int().default(15),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                pageSize: v.pageSize,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });

    export type Outbound = {
        pageSize: number;
        cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PoliciesV1ListRequest> = z
        .object({
            pageSize: z.number().int().default(15),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                pageSize: v.pageSize,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });
}

/** @internal */
export namespace Cursor$ {
    export const inboundSchema: z.ZodType<Cursor, z.ZodTypeDef, unknown> = z
        .object({
            next: z.string().optional(),
            data: z.array(components.Policy$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                data: v.data,
            };
        });

    export type Outbound = {
        next?: string | undefined;
        data: Array<components.Policy$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Cursor> = z
        .object({
            next: z.string().optional(),
            data: z.array(components.Policy$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                data: v.data,
            };
        });
}

/** @internal */
export namespace PoliciesV1ListResponseBody$ {
    export const inboundSchema: z.ZodType<PoliciesV1ListResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            cursor: z.lazy(() => Cursor$.inboundSchema),
        })
        .transform((v) => {
            return {
                cursor: v.cursor,
            };
        });

    export type Outbound = {
        cursor: Cursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PoliciesV1ListResponseBody> = z
        .object({
            cursor: z.lazy(() => Cursor$.outboundSchema),
        })
        .transform((v) => {
            return {
                cursor: v.cursor,
            };
        });
}

/** @internal */
export namespace PoliciesV1ListResponse$ {
    export const inboundSchema: z.ZodType<PoliciesV1ListResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => PoliciesV1ListResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return {
                result: v.Result,
            };
        });

    export type Outbound = {
        Result: PoliciesV1ListResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PoliciesV1ListResponse> = z
        .object({
            result: z.lazy(() => PoliciesV1ListResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return {
                Result: v.result,
            };
        });
}
