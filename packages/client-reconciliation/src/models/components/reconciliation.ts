/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Reconciliation = {
    id: string;
    policyID: string;
    createdAt: Date;
    reconciliedAtLedger: Date;
    reconciliedAtPayments: Date;
    status: string;
    paymentsBalances: { [k: string]: number };
    ledgerBalances: { [k: string]: number };
    driftBalances: { [k: string]: number };
    error?: string | undefined;
};

/** @internal */
export namespace Reconciliation$ {
    export const inboundSchema: z.ZodType<Reconciliation, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            policyID: z.string(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            reconciliedAtLedger: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            reconciliedAtPayments: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            status: z.string(),
            paymentsBalances: z.record(z.number().int()),
            ledgerBalances: z.record(z.number().int()),
            driftBalances: z.record(z.number().int()),
            error: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                policyID: v.policyID,
                createdAt: v.createdAt,
                reconciliedAtLedger: v.reconciliedAtLedger,
                reconciliedAtPayments: v.reconciliedAtPayments,
                status: v.status,
                paymentsBalances: v.paymentsBalances,
                ledgerBalances: v.ledgerBalances,
                driftBalances: v.driftBalances,
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        id: string;
        policyID: string;
        createdAt: string;
        reconciliedAtLedger: string;
        reconciliedAtPayments: string;
        status: string;
        paymentsBalances: { [k: string]: number };
        ledgerBalances: { [k: string]: number };
        driftBalances: { [k: string]: number };
        error?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reconciliation> = z
        .object({
            id: z.string(),
            policyID: z.string(),
            createdAt: z.date().transform((v) => v.toISOString()),
            reconciliedAtLedger: z.date().transform((v) => v.toISOString()),
            reconciliedAtPayments: z.date().transform((v) => v.toISOString()),
            status: z.string(),
            paymentsBalances: z.record(z.number().int()),
            ledgerBalances: z.record(z.number().int()),
            driftBalances: z.record(z.number().int()),
            error: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                policyID: v.policyID,
                createdAt: v.createdAt,
                reconciliedAtLedger: v.reconciliedAtLedger,
                reconciliedAtPayments: v.reconciliedAtPayments,
                status: v.status,
                paymentsBalances: v.paymentsBalances,
                ledgerBalances: v.ledgerBalances,
                driftBalances: v.driftBalances,
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
