/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccountType, AccountType$ } from "./accounttype.js";
import { Connector, Connector$ } from "./connector.js";
import * as z from "zod";

export type Account = {
    id: string;
    createdAt: Date;
    reference: string;
    connectorID: string;
    provider?: Connector | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    defaultCurrency: string;
    defaultAsset: string;
    accountName: string;
    type: AccountType;
    pools: Array<string>;
    metadata: { [k: string]: string };
    raw?: any | undefined;
};

/** @internal */
export namespace Account$ {
    export const inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        reference: z.string(),
        connectorID: z.string(),
        provider: Connector$.inboundSchema.optional(),
        defaultCurrency: z.string(),
        defaultAsset: z.string(),
        accountName: z.string(),
        type: AccountType$.inboundSchema,
        pools: z.array(z.string()),
        metadata: z.record(z.string()),
        raw: z.any().optional(),
    });

    export type Outbound = {
        id: string;
        createdAt: string;
        reference: string;
        connectorID: string;
        provider?: string | undefined;
        defaultCurrency: string;
        defaultAsset: string;
        accountName: string;
        type: string;
        pools: Array<string>;
        metadata: { [k: string]: string };
        raw?: any | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Account> = z.object({
        id: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        reference: z.string(),
        connectorID: z.string(),
        provider: Connector$.outboundSchema.optional(),
        defaultCurrency: z.string(),
        defaultAsset: z.string(),
        accountName: z.string(),
        type: AccountType$.outboundSchema,
        pools: z.array(z.string()),
        metadata: z.record(z.string()),
        raw: z.any().optional(),
    });
}
