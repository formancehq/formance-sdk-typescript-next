/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentStatus, PaymentStatus$ } from "./paymentstatus";
import * as z from "zod";

export type TaskWise = {
    id: string;
    connectorID: string;
    createdAt: Date;
    updatedAt: Date;
    status: PaymentStatus;
    state: { [k: string]: any };
    error?: string | undefined;
    descriptor: string;
};

/** @internal */
export namespace TaskWise$ {
    export const inboundSchema: z.ZodType<TaskWise, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            connectorID: z.string(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            status: PaymentStatus$.inboundSchema,
            state: z.record(z.any()),
            error: z.string().optional(),
            descriptor: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                connectorID: v.connectorID,
                createdAt: v.createdAt,
                updatedAt: v.updatedAt,
                status: v.status,
                state: v.state,
                ...(v.error === undefined ? null : { error: v.error }),
                descriptor: v.descriptor,
            };
        });

    export type Outbound = {
        id: string;
        connectorID: string;
        createdAt: string;
        updatedAt: string;
        status: string;
        state: { [k: string]: any };
        error?: string | undefined;
        descriptor: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskWise> = z
        .object({
            id: z.string(),
            connectorID: z.string(),
            createdAt: z.date().transform((v) => v.toISOString()),
            updatedAt: z.date().transform((v) => v.toISOString()),
            status: PaymentStatus$.outboundSchema,
            state: z.record(z.any()),
            error: z.string().optional(),
            descriptor: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                connectorID: v.connectorID,
                createdAt: v.createdAt,
                updatedAt: v.updatedAt,
                status: v.status,
                state: v.state,
                ...(v.error === undefined ? null : { error: v.error }),
                descriptor: v.descriptor,
            };
        });
}
