/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AtlarConfig = {
    name: string;
    /**
     * The frequency at which the connector will try to fetch new BalanceTransaction objects from Stripe API.
     */
    pollingPeriod?: string | undefined;
    /**
     * The base URL the client uses for making requests towards the Atlar API.
     */
    baseUrl?: string | undefined;
    /**
     * The frequency at which the connector tries to fetch the status of payment initiations from the Atlar API.
     */
    transferInitiationStatusPollingPeriod?: string | undefined;
    /**
     * The access key used by the connector for authorizing requests to the Atlar API. You can obtain it along with the associated secret from the Atlar dashboard.
     */
    accessKey: string;
    /**
     * The secret used by the connector for authorizing requests to the Atlar API. You can obtain it along with the associated access key from the Atlar dashboard.
     */
    secret: string;
    /**
     * Number of items to fetch when querying paginated APIs.
     */
    pageSize?: number | undefined;
};

/** @internal */
export namespace AtlarConfig$ {
    export const inboundSchema: z.ZodType<AtlarConfig, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            pollingPeriod: z.string().default("120s"),
            baseUrl: z.string().default("https://api.atlar.com"),
            transferInitiationStatusPollingPeriod: z.string().default("120s"),
            accessKey: z.string(),
            secret: z.string(),
            pageSize: z.number().int().default(25),
        })
        .transform((v) => {
            return {
                name: v.name,
                pollingPeriod: v.pollingPeriod,
                baseUrl: v.baseUrl,
                transferInitiationStatusPollingPeriod: v.transferInitiationStatusPollingPeriod,
                accessKey: v.accessKey,
                secret: v.secret,
                pageSize: v.pageSize,
            };
        });

    export type Outbound = {
        name: string;
        pollingPeriod: string;
        baseUrl: string;
        transferInitiationStatusPollingPeriod: string;
        accessKey: string;
        secret: string;
        pageSize: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AtlarConfig> = z
        .object({
            name: z.string(),
            pollingPeriod: z.string().default("120s"),
            baseUrl: z.string().default("https://api.atlar.com"),
            transferInitiationStatusPollingPeriod: z.string().default("120s"),
            accessKey: z.string(),
            secret: z.string(),
            pageSize: z.number().int().default(25),
        })
        .transform((v) => {
            return {
                name: v.name,
                pollingPeriod: v.pollingPeriod,
                baseUrl: v.baseUrl,
                transferInitiationStatusPollingPeriod: v.transferInitiationStatusPollingPeriod,
                accessKey: v.accessKey,
                secret: v.secret,
                pageSize: v.pageSize,
            };
        });
}
