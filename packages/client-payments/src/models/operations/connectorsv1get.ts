/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ConnectorsV1GetRequest = {
    connector: components.Connector;
    connectorId: string;
};

export type ConnectorsV1GetData =
    | components.WiseConfig
    | components.StripeConfig
    | components.GenericConfig
    | components.ModulrConfig
    | components.CurrencyCloudConfig
    | components.MangoPayConfig
    | components.MoneycorpConfig
    | components.AdyenConfig
    | components.DumypayConfig
    | components.AtlarConfig
    | components.BankingCircleConfig;

/**
 * The request has succeeded.
 */
export type ConnectorsV1GetResponseBody = {
    data:
        | components.WiseConfig
        | components.StripeConfig
        | components.GenericConfig
        | components.ModulrConfig
        | components.CurrencyCloudConfig
        | components.MangoPayConfig
        | components.MoneycorpConfig
        | components.AdyenConfig
        | components.DumypayConfig
        | components.AtlarConfig
        | components.BankingCircleConfig;
};

/** @internal */
export namespace ConnectorsV1GetRequest$ {
    export const inboundSchema: z.ZodType<ConnectorsV1GetRequest, z.ZodTypeDef, unknown> = z
        .object({
            connector: components.Connector$.inboundSchema,
            connectorId: z.string(),
        })
        .transform((v) => {
            return {
                connector: v.connector,
                connectorId: v.connectorId,
            };
        });

    export type Outbound = {
        connector: string;
        connectorId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsV1GetRequest> = z
        .object({
            connector: components.Connector$.outboundSchema,
            connectorId: z.string(),
        })
        .transform((v) => {
            return {
                connector: v.connector,
                connectorId: v.connectorId,
            };
        });
}

/** @internal */
export namespace ConnectorsV1GetData$ {
    export const inboundSchema: z.ZodType<ConnectorsV1GetData, z.ZodTypeDef, unknown> = z.union([
        components.WiseConfig$.inboundSchema,
        components.StripeConfig$.inboundSchema,
        components.GenericConfig$.inboundSchema,
        components.ModulrConfig$.inboundSchema,
        components.CurrencyCloudConfig$.inboundSchema,
        components.MangoPayConfig$.inboundSchema,
        components.MoneycorpConfig$.inboundSchema,
        components.AdyenConfig$.inboundSchema,
        components.DumypayConfig$.inboundSchema,
        components.AtlarConfig$.inboundSchema,
        components.BankingCircleConfig$.inboundSchema,
    ]);

    export type Outbound =
        | components.WiseConfig$.Outbound
        | components.StripeConfig$.Outbound
        | components.GenericConfig$.Outbound
        | components.ModulrConfig$.Outbound
        | components.CurrencyCloudConfig$.Outbound
        | components.MangoPayConfig$.Outbound
        | components.MoneycorpConfig$.Outbound
        | components.AdyenConfig$.Outbound
        | components.DumypayConfig$.Outbound
        | components.AtlarConfig$.Outbound
        | components.BankingCircleConfig$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsV1GetData> = z.union([
        components.WiseConfig$.outboundSchema,
        components.StripeConfig$.outboundSchema,
        components.GenericConfig$.outboundSchema,
        components.ModulrConfig$.outboundSchema,
        components.CurrencyCloudConfig$.outboundSchema,
        components.MangoPayConfig$.outboundSchema,
        components.MoneycorpConfig$.outboundSchema,
        components.AdyenConfig$.outboundSchema,
        components.DumypayConfig$.outboundSchema,
        components.AtlarConfig$.outboundSchema,
        components.BankingCircleConfig$.outboundSchema,
    ]);
}

/** @internal */
export namespace ConnectorsV1GetResponseBody$ {
    export const inboundSchema: z.ZodType<ConnectorsV1GetResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            data: z.union([
                components.WiseConfig$.inboundSchema,
                components.StripeConfig$.inboundSchema,
                components.GenericConfig$.inboundSchema,
                components.ModulrConfig$.inboundSchema,
                components.CurrencyCloudConfig$.inboundSchema,
                components.MangoPayConfig$.inboundSchema,
                components.MoneycorpConfig$.inboundSchema,
                components.AdyenConfig$.inboundSchema,
                components.DumypayConfig$.inboundSchema,
                components.AtlarConfig$.inboundSchema,
                components.BankingCircleConfig$.inboundSchema,
            ]),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data:
            | components.WiseConfig$.Outbound
            | components.StripeConfig$.Outbound
            | components.GenericConfig$.Outbound
            | components.ModulrConfig$.Outbound
            | components.CurrencyCloudConfig$.Outbound
            | components.MangoPayConfig$.Outbound
            | components.MoneycorpConfig$.Outbound
            | components.AdyenConfig$.Outbound
            | components.DumypayConfig$.Outbound
            | components.AtlarConfig$.Outbound
            | components.BankingCircleConfig$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsV1GetResponseBody> = z
        .object({
            data: z.union([
                components.WiseConfig$.outboundSchema,
                components.StripeConfig$.outboundSchema,
                components.GenericConfig$.outboundSchema,
                components.ModulrConfig$.outboundSchema,
                components.CurrencyCloudConfig$.outboundSchema,
                components.MangoPayConfig$.outboundSchema,
                components.MoneycorpConfig$.outboundSchema,
                components.AdyenConfig$.outboundSchema,
                components.DumypayConfig$.outboundSchema,
                components.AtlarConfig$.outboundSchema,
                components.BankingCircleConfig$.outboundSchema,
            ]),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
