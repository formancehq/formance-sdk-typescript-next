/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type AccountsCreateRequestBody = {
    reference: string;
    connectorID: string;
    createdAt: Date;
    type: components.AccountType;
    defaultAsset?: string | undefined;
    accountName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
};

/**
 * The request has succeeded.
 */
export type AccountsCreateResponseBody = {
    data: components.Account;
};

/** @internal */
export namespace AccountsCreateRequestBody$ {
    export const inboundSchema: z.ZodType<AccountsCreateRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            reference: z.string(),
            connectorID: z.string(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            type: components.AccountType$.inboundSchema,
            defaultAsset: z.string().optional(),
            accountName: z.string().optional(),
            metadata: z.record(z.string()).optional(),
        });

    export type Outbound = {
        reference: string;
        connectorID: string;
        createdAt: string;
        type: string;
        defaultAsset?: string | undefined;
        accountName?: string | undefined;
        metadata?: { [k: string]: string } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsCreateRequestBody> =
        z.object({
            reference: z.string(),
            connectorID: z.string(),
            createdAt: z.date().transform((v) => v.toISOString()),
            type: components.AccountType$.outboundSchema,
            defaultAsset: z.string().optional(),
            accountName: z.string().optional(),
            metadata: z.record(z.string()).optional(),
        });
}

/** @internal */
export namespace AccountsCreateResponseBody$ {
    export const inboundSchema: z.ZodType<AccountsCreateResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: components.Account$.inboundSchema,
        });

    export type Outbound = {
        data: components.Account$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsCreateResponseBody> =
        z.object({
            data: components.Account$.outboundSchema,
        });
}
