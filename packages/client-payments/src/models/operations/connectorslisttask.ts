/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type ConnectorsListTaskRequest = {
    connector: components.Connector;
    connectorId: string;
    pageSize?: number | undefined;
    cursor?: string | undefined;
};

export type ConnectorsListTaskData =
    | components.TaskStripe
    | components.TaskWise
    | components.TaskCurrencyCloud
    | components.TaskDummyPay
    | components.TaskModulr
    | components.TaskBankingCircle
    | components.TaskMangoPay
    | components.TaskMoneyCorp;

export type ConnectorsListTaskCursor = {
    next?: string | undefined;
    data: Array<
        | components.TaskStripe
        | components.TaskWise
        | components.TaskCurrencyCloud
        | components.TaskDummyPay
        | components.TaskModulr
        | components.TaskBankingCircle
        | components.TaskMangoPay
        | components.TaskMoneyCorp
    >;
};

/**
 * The request has succeeded.
 */
export type ConnectorsListTaskResponseBody = {
    cursor: ConnectorsListTaskCursor;
};

export type ConnectorsListTaskResponse = {
    result: ConnectorsListTaskResponseBody;
};

/** @internal */
export namespace ConnectorsListTaskRequest$ {
    export const inboundSchema: z.ZodType<ConnectorsListTaskRequest, z.ZodTypeDef, unknown> =
        z.object({
            connector: components.Connector$.inboundSchema,
            connectorId: z.string(),
            pageSize: z.number().int().default(15),
            cursor: z.string().optional(),
        });

    export type Outbound = {
        connector: string;
        connectorId: string;
        pageSize: number;
        cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsListTaskRequest> =
        z.object({
            connector: components.Connector$.outboundSchema,
            connectorId: z.string(),
            pageSize: z.number().int().default(15),
            cursor: z.string().optional(),
        });
}

/** @internal */
export namespace ConnectorsListTaskData$ {
    export const inboundSchema: z.ZodType<ConnectorsListTaskData, z.ZodTypeDef, unknown> = z.union([
        components.TaskStripe$.inboundSchema,
        components.TaskWise$.inboundSchema,
        components.TaskCurrencyCloud$.inboundSchema,
        components.TaskDummyPay$.inboundSchema,
        components.TaskModulr$.inboundSchema,
        components.TaskBankingCircle$.inboundSchema,
        components.TaskMangoPay$.inboundSchema,
        components.TaskMoneyCorp$.inboundSchema,
    ]);

    export type Outbound =
        | components.TaskStripe$.Outbound
        | components.TaskWise$.Outbound
        | components.TaskCurrencyCloud$.Outbound
        | components.TaskDummyPay$.Outbound
        | components.TaskModulr$.Outbound
        | components.TaskBankingCircle$.Outbound
        | components.TaskMangoPay$.Outbound
        | components.TaskMoneyCorp$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsListTaskData> =
        z.union([
            components.TaskStripe$.outboundSchema,
            components.TaskWise$.outboundSchema,
            components.TaskCurrencyCloud$.outboundSchema,
            components.TaskDummyPay$.outboundSchema,
            components.TaskModulr$.outboundSchema,
            components.TaskBankingCircle$.outboundSchema,
            components.TaskMangoPay$.outboundSchema,
            components.TaskMoneyCorp$.outboundSchema,
        ]);
}

/** @internal */
export namespace ConnectorsListTaskCursor$ {
    export const inboundSchema: z.ZodType<ConnectorsListTaskCursor, z.ZodTypeDef, unknown> =
        z.object({
            next: z.string().optional(),
            data: z.array(
                z.union([
                    components.TaskStripe$.inboundSchema,
                    components.TaskWise$.inboundSchema,
                    components.TaskCurrencyCloud$.inboundSchema,
                    components.TaskDummyPay$.inboundSchema,
                    components.TaskModulr$.inboundSchema,
                    components.TaskBankingCircle$.inboundSchema,
                    components.TaskMangoPay$.inboundSchema,
                    components.TaskMoneyCorp$.inboundSchema,
                ])
            ),
        });

    export type Outbound = {
        next?: string | undefined;
        data: Array<
            | components.TaskStripe$.Outbound
            | components.TaskWise$.Outbound
            | components.TaskCurrencyCloud$.Outbound
            | components.TaskDummyPay$.Outbound
            | components.TaskModulr$.Outbound
            | components.TaskBankingCircle$.Outbound
            | components.TaskMangoPay$.Outbound
            | components.TaskMoneyCorp$.Outbound
        >;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsListTaskCursor> =
        z.object({
            next: z.string().optional(),
            data: z.array(
                z.union([
                    components.TaskStripe$.outboundSchema,
                    components.TaskWise$.outboundSchema,
                    components.TaskCurrencyCloud$.outboundSchema,
                    components.TaskDummyPay$.outboundSchema,
                    components.TaskModulr$.outboundSchema,
                    components.TaskBankingCircle$.outboundSchema,
                    components.TaskMangoPay$.outboundSchema,
                    components.TaskMoneyCorp$.outboundSchema,
                ])
            ),
        });
}

/** @internal */
export namespace ConnectorsListTaskResponseBody$ {
    export const inboundSchema: z.ZodType<ConnectorsListTaskResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => ConnectorsListTaskCursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: ConnectorsListTaskCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsListTaskResponseBody> =
        z.object({
            cursor: z.lazy(() => ConnectorsListTaskCursor$.outboundSchema),
        });
}

/** @internal */
export namespace ConnectorsListTaskResponse$ {
    export const inboundSchema: z.ZodType<ConnectorsListTaskResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => ConnectorsListTaskResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: ConnectorsListTaskResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsListTaskResponse> = z
        .object({
            result: z.lazy(() => ConnectorsListTaskResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
