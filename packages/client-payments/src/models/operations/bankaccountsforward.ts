/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type BankAccountsForwardRequestBody = {
    connectorID: string;
};

export type BankAccountsForwardRequest = {
    bankAccountId: string;
    requestBody: BankAccountsForwardRequestBody;
};

/**
 * The request has succeeded.
 */
export type BankAccountsForwardResponseBody = {
    data: components.BankAccount;
};

/** @internal */
export namespace BankAccountsForwardRequestBody$ {
    export const inboundSchema: z.ZodType<BankAccountsForwardRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            connectorID: z.string(),
        });

    export type Outbound = {
        connectorID: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BankAccountsForwardRequestBody> =
        z.object({
            connectorID: z.string(),
        });
}

/** @internal */
export namespace BankAccountsForwardRequest$ {
    export const inboundSchema: z.ZodType<BankAccountsForwardRequest, z.ZodTypeDef, unknown> = z
        .object({
            bankAccountId: z.string(),
            RequestBody: z.lazy(() => BankAccountsForwardRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        bankAccountId: string;
        RequestBody: BankAccountsForwardRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BankAccountsForwardRequest> = z
        .object({
            bankAccountId: z.string(),
            requestBody: z.lazy(() => BankAccountsForwardRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace BankAccountsForwardResponseBody$ {
    export const inboundSchema: z.ZodType<BankAccountsForwardResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            data: components.BankAccount$.inboundSchema,
        });

    export type Outbound = {
        data: components.BankAccount$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        BankAccountsForwardResponseBody
    > = z.object({
        data: components.BankAccount$.outboundSchema,
    });
}
