/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ConnectorsV1GetTaskRequest = {
    connector: components.Connector;
    connectorId: string;
    taskId: string;
};

export type ConnectorsV1GetTaskData =
    | components.TaskStripe
    | components.TaskWise
    | components.TaskCurrencyCloud
    | components.TaskDummyPay
    | components.TaskModulr
    | components.TaskBankingCircle
    | components.TaskMangoPay
    | components.TaskMoneyCorp;

/**
 * The request has succeeded.
 */
export type ConnectorsV1GetTaskResponseBody = {
    data:
        | components.TaskStripe
        | components.TaskWise
        | components.TaskCurrencyCloud
        | components.TaskDummyPay
        | components.TaskModulr
        | components.TaskBankingCircle
        | components.TaskMangoPay
        | components.TaskMoneyCorp;
};

/** @internal */
export namespace ConnectorsV1GetTaskRequest$ {
    export const inboundSchema: z.ZodType<ConnectorsV1GetTaskRequest, z.ZodTypeDef, unknown> = z
        .object({
            connector: components.Connector$.inboundSchema,
            connectorId: z.string(),
            taskId: z.string(),
        })
        .transform((v) => {
            return {
                connector: v.connector,
                connectorId: v.connectorId,
                taskId: v.taskId,
            };
        });

    export type Outbound = {
        connector: string;
        connectorId: string;
        taskId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsV1GetTaskRequest> = z
        .object({
            connector: components.Connector$.outboundSchema,
            connectorId: z.string(),
            taskId: z.string(),
        })
        .transform((v) => {
            return {
                connector: v.connector,
                connectorId: v.connectorId,
                taskId: v.taskId,
            };
        });
}

/** @internal */
export namespace ConnectorsV1GetTaskData$ {
    export const inboundSchema: z.ZodType<ConnectorsV1GetTaskData, z.ZodTypeDef, unknown> = z.union(
        [
            components.TaskStripe$.inboundSchema,
            components.TaskWise$.inboundSchema,
            components.TaskCurrencyCloud$.inboundSchema,
            components.TaskDummyPay$.inboundSchema,
            components.TaskModulr$.inboundSchema,
            components.TaskBankingCircle$.inboundSchema,
            components.TaskMangoPay$.inboundSchema,
            components.TaskMoneyCorp$.inboundSchema,
        ]
    );

    export type Outbound =
        | components.TaskStripe$.Outbound
        | components.TaskWise$.Outbound
        | components.TaskCurrencyCloud$.Outbound
        | components.TaskDummyPay$.Outbound
        | components.TaskModulr$.Outbound
        | components.TaskBankingCircle$.Outbound
        | components.TaskMangoPay$.Outbound
        | components.TaskMoneyCorp$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsV1GetTaskData> =
        z.union([
            components.TaskStripe$.outboundSchema,
            components.TaskWise$.outboundSchema,
            components.TaskCurrencyCloud$.outboundSchema,
            components.TaskDummyPay$.outboundSchema,
            components.TaskModulr$.outboundSchema,
            components.TaskBankingCircle$.outboundSchema,
            components.TaskMangoPay$.outboundSchema,
            components.TaskMoneyCorp$.outboundSchema,
        ]);
}

/** @internal */
export namespace ConnectorsV1GetTaskResponseBody$ {
    export const inboundSchema: z.ZodType<ConnectorsV1GetTaskResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                data: z.union([
                    components.TaskStripe$.inboundSchema,
                    components.TaskWise$.inboundSchema,
                    components.TaskCurrencyCloud$.inboundSchema,
                    components.TaskDummyPay$.inboundSchema,
                    components.TaskModulr$.inboundSchema,
                    components.TaskBankingCircle$.inboundSchema,
                    components.TaskMangoPay$.inboundSchema,
                    components.TaskMoneyCorp$.inboundSchema,
                ]),
            })
            .transform((v) => {
                return {
                    data: v.data,
                };
            });

    export type Outbound = {
        data:
            | components.TaskStripe$.Outbound
            | components.TaskWise$.Outbound
            | components.TaskCurrencyCloud$.Outbound
            | components.TaskDummyPay$.Outbound
            | components.TaskModulr$.Outbound
            | components.TaskBankingCircle$.Outbound
            | components.TaskMangoPay$.Outbound
            | components.TaskMoneyCorp$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectorsV1GetTaskResponseBody
    > = z
        .object({
            data: z.union([
                components.TaskStripe$.outboundSchema,
                components.TaskWise$.outboundSchema,
                components.TaskCurrencyCloud$.outboundSchema,
                components.TaskDummyPay$.outboundSchema,
                components.TaskModulr$.outboundSchema,
                components.TaskBankingCircle$.outboundSchema,
                components.TaskMangoPay$.outboundSchema,
                components.TaskMoneyCorp$.outboundSchema,
            ]),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
