/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type AccountsBalancesRequest = {
    accountId: string;
    cursor?: string | undefined;
    pageSize?: number | undefined;
    limit?: number | undefined;
    asset?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sort: Array<string>;
};

export type AccountsBalancesCursor = {
    next?: string | undefined;
    data: Array<components.AccountBalance>;
};

/**
 * The request has succeeded.
 */
export type AccountsBalancesResponseBody = {
    cursor: AccountsBalancesCursor;
};

export type AccountsBalancesResponse = {
    result: AccountsBalancesResponseBody;
};

/** @internal */
export namespace AccountsBalancesRequest$ {
    export const inboundSchema: z.ZodType<AccountsBalancesRequest, z.ZodTypeDef, unknown> =
        z.object({
            accountId: z.string(),
            cursor: z.string().optional(),
            pageSize: z.number().int().optional(),
            limit: z.number().int().optional(),
            asset: z.string().optional(),
            from: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            to: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            sort: z.array(z.string()),
        });

    export type Outbound = {
        accountId: string;
        cursor?: string | undefined;
        pageSize?: number | undefined;
        limit?: number | undefined;
        asset?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
        sort: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsBalancesRequest> =
        z.object({
            accountId: z.string(),
            cursor: z.string().optional(),
            pageSize: z.number().int().optional(),
            limit: z.number().int().optional(),
            asset: z.string().optional(),
            from: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            to: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            sort: z.array(z.string()),
        });
}

/** @internal */
export namespace AccountsBalancesCursor$ {
    export const inboundSchema: z.ZodType<AccountsBalancesCursor, z.ZodTypeDef, unknown> = z.object(
        {
            next: z.string().optional(),
            data: z.array(components.AccountBalance$.inboundSchema),
        }
    );

    export type Outbound = {
        next?: string | undefined;
        data: Array<components.AccountBalance$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsBalancesCursor> =
        z.object({
            next: z.string().optional(),
            data: z.array(components.AccountBalance$.outboundSchema),
        });
}

/** @internal */
export namespace AccountsBalancesResponseBody$ {
    export const inboundSchema: z.ZodType<AccountsBalancesResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            cursor: z.lazy(() => AccountsBalancesCursor$.inboundSchema),
        });

    export type Outbound = {
        cursor: AccountsBalancesCursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsBalancesResponseBody> =
        z.object({
            cursor: z.lazy(() => AccountsBalancesCursor$.outboundSchema),
        });
}

/** @internal */
export namespace AccountsBalancesResponse$ {
    export const inboundSchema: z.ZodType<AccountsBalancesResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => AccountsBalancesResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: AccountsBalancesResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsBalancesResponse> = z
        .object({
            result: z.lazy(() => AccountsBalancesResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
