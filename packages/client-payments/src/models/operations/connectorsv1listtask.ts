/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ConnectorsV1ListTaskRequest = {
    connector: components.Connector;
    connectorId: string;
    pageSize?: number | undefined;
    cursor?: string | undefined;
};

export type ConnectorsV1ListTaskData =
    | components.TaskStripe
    | components.TaskWise
    | components.TaskCurrencyCloud
    | components.TaskDummyPay
    | components.TaskModulr
    | components.TaskBankingCircle
    | components.TaskMangoPay
    | components.TaskMoneyCorp;

export type Cursor = {
    next?: string | undefined;
    data: Array<
        | components.TaskStripe
        | components.TaskWise
        | components.TaskCurrencyCloud
        | components.TaskDummyPay
        | components.TaskModulr
        | components.TaskBankingCircle
        | components.TaskMangoPay
        | components.TaskMoneyCorp
    >;
};

/**
 * The request has succeeded.
 */
export type ConnectorsV1ListTaskResponseBody = {
    cursor: Cursor;
};

export type ConnectorsV1ListTaskResponse = {
    result: ConnectorsV1ListTaskResponseBody;
};

/** @internal */
export namespace ConnectorsV1ListTaskRequest$ {
    export const inboundSchema: z.ZodType<ConnectorsV1ListTaskRequest, z.ZodTypeDef, unknown> = z
        .object({
            connector: components.Connector$.inboundSchema,
            connectorId: z.string(),
            pageSize: z.number().int().default(15),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                connector: v.connector,
                connectorId: v.connectorId,
                pageSize: v.pageSize,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });

    export type Outbound = {
        connector: string;
        connectorId: string;
        pageSize: number;
        cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsV1ListTaskRequest> = z
        .object({
            connector: components.Connector$.outboundSchema,
            connectorId: z.string(),
            pageSize: z.number().int().default(15),
            cursor: z.string().optional(),
        })
        .transform((v) => {
            return {
                connector: v.connector,
                connectorId: v.connectorId,
                pageSize: v.pageSize,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
            };
        });
}

/** @internal */
export namespace ConnectorsV1ListTaskData$ {
    export const inboundSchema: z.ZodType<ConnectorsV1ListTaskData, z.ZodTypeDef, unknown> =
        z.union([
            components.TaskStripe$.inboundSchema,
            components.TaskWise$.inboundSchema,
            components.TaskCurrencyCloud$.inboundSchema,
            components.TaskDummyPay$.inboundSchema,
            components.TaskModulr$.inboundSchema,
            components.TaskBankingCircle$.inboundSchema,
            components.TaskMangoPay$.inboundSchema,
            components.TaskMoneyCorp$.inboundSchema,
        ]);

    export type Outbound =
        | components.TaskStripe$.Outbound
        | components.TaskWise$.Outbound
        | components.TaskCurrencyCloud$.Outbound
        | components.TaskDummyPay$.Outbound
        | components.TaskModulr$.Outbound
        | components.TaskBankingCircle$.Outbound
        | components.TaskMangoPay$.Outbound
        | components.TaskMoneyCorp$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsV1ListTaskData> =
        z.union([
            components.TaskStripe$.outboundSchema,
            components.TaskWise$.outboundSchema,
            components.TaskCurrencyCloud$.outboundSchema,
            components.TaskDummyPay$.outboundSchema,
            components.TaskModulr$.outboundSchema,
            components.TaskBankingCircle$.outboundSchema,
            components.TaskMangoPay$.outboundSchema,
            components.TaskMoneyCorp$.outboundSchema,
        ]);
}

/** @internal */
export namespace Cursor$ {
    export const inboundSchema: z.ZodType<Cursor, z.ZodTypeDef, unknown> = z
        .object({
            next: z.string().optional(),
            data: z.array(
                z.union([
                    components.TaskStripe$.inboundSchema,
                    components.TaskWise$.inboundSchema,
                    components.TaskCurrencyCloud$.inboundSchema,
                    components.TaskDummyPay$.inboundSchema,
                    components.TaskModulr$.inboundSchema,
                    components.TaskBankingCircle$.inboundSchema,
                    components.TaskMangoPay$.inboundSchema,
                    components.TaskMoneyCorp$.inboundSchema,
                ])
            ),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                data: v.data,
            };
        });

    export type Outbound = {
        next?: string | undefined;
        data: Array<
            | components.TaskStripe$.Outbound
            | components.TaskWise$.Outbound
            | components.TaskCurrencyCloud$.Outbound
            | components.TaskDummyPay$.Outbound
            | components.TaskModulr$.Outbound
            | components.TaskBankingCircle$.Outbound
            | components.TaskMangoPay$.Outbound
            | components.TaskMoneyCorp$.Outbound
        >;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Cursor> = z
        .object({
            next: z.string().optional(),
            data: z.array(
                z.union([
                    components.TaskStripe$.outboundSchema,
                    components.TaskWise$.outboundSchema,
                    components.TaskCurrencyCloud$.outboundSchema,
                    components.TaskDummyPay$.outboundSchema,
                    components.TaskModulr$.outboundSchema,
                    components.TaskBankingCircle$.outboundSchema,
                    components.TaskMangoPay$.outboundSchema,
                    components.TaskMoneyCorp$.outboundSchema,
                ])
            ),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                data: v.data,
            };
        });
}

/** @internal */
export namespace ConnectorsV1ListTaskResponseBody$ {
    export const inboundSchema: z.ZodType<ConnectorsV1ListTaskResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                cursor: z.lazy(() => Cursor$.inboundSchema),
            })
            .transform((v) => {
                return {
                    cursor: v.cursor,
                };
            });

    export type Outbound = {
        cursor: Cursor$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectorsV1ListTaskResponseBody
    > = z
        .object({
            cursor: z.lazy(() => Cursor$.outboundSchema),
        })
        .transform((v) => {
            return {
                cursor: v.cursor,
            };
        });
}

/** @internal */
export namespace ConnectorsV1ListTaskResponse$ {
    export const inboundSchema: z.ZodType<ConnectorsV1ListTaskResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => ConnectorsV1ListTaskResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return {
                result: v.Result,
            };
        });

    export type Outbound = {
        Result: ConnectorsV1ListTaskResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsV1ListTaskResponse> = z
        .object({
            result: z.lazy(() => ConnectorsV1ListTaskResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return {
                Result: v.result,
            };
        });
}
