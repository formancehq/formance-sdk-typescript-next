/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * An unexpected error response.
 */
export type PaymentsErrorData = {
    errorCode: components.PaymentErrorCodes;
    errorMessage: string;
};

/**
 * An unexpected error response.
 */
export class PaymentsError extends Error {
    errorCode: components.PaymentErrorCodes;
    errorMessage: string;

    /** The original data that was passed to this error instance. */
    data$: PaymentsErrorData;

    constructor(err: PaymentsErrorData) {
        super("");
        this.data$ = err;

        this.errorCode = err.errorCode;
        this.errorMessage = err.errorMessage;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "PaymentsError";
    }
}

/** @internal */
export namespace PaymentsError$ {
    export const inboundSchema: z.ZodType<PaymentsError, z.ZodTypeDef, unknown> = z
        .object({
            errorCode: components.PaymentErrorCodes$.inboundSchema,
            errorMessage: z.string(),
        })
        .transform((v) => {
            return new PaymentsError(v);
        });

    export type Outbound = {
        errorCode: string;
        errorMessage: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsError> = z
        .instanceof(PaymentsError)
        .transform((v) => v.data$)
        .pipe(
            z.object({
                errorCode: components.PaymentErrorCodes$.outboundSchema,
                errorMessage: z.string(),
            })
        );
}
